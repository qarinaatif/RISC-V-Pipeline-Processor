circuit Top :
  module Programcounter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : SInt<32>, pcout : SInt<32>, pc4 : SInt<32>}

    reg reg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("hfffffffc"))) @[Programcounter.scala 12:22]
    reg <= io.in @[Programcounter.scala 13:9]
    io.pcout <= reg @[Programcounter.scala 14:14]
    node _io_pc4_T = add(reg, asSInt(UInt<4>("h4"))) @[Programcounter.scala 15:19]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[Programcounter.scala 15:19]
    node _io_pc4_T_2 = asSInt(_io_pc4_T_1) @[Programcounter.scala 15:19]
    io.pc4 <= _io_pc4_T_2 @[Programcounter.scala 15:12]

  module InstructionFetch :
    input clock : Clock
    input reset : Reset
    output io : { flip address : UInt<32>, instruction : UInt<32>, flip stall : UInt<1>, coreInstrReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip coreInstrResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    when io.stall : @[InstructionFetch.scala 15:21]
      io.coreInstrResp.ready <= UInt<1>("h0") @[InstructionFetch.scala 16:30]
      io.coreInstrReq.valid <= UInt<1>("h0") @[InstructionFetch.scala 17:29]
      io.coreInstrReq.bits.activeByteLane <= UInt<1>("h0") @[InstructionFetch.scala 18:43]
      io.coreInstrReq.bits.isWrite <= UInt<1>("h0") @[InstructionFetch.scala 19:36]
      io.coreInstrReq.bits.dataRequest is invalid @[InstructionFetch.scala 21:40]
      io.coreInstrReq.bits.addrRequest <= UInt<1>("h0") @[InstructionFetch.scala 22:40]
      io.instruction <= UInt<1>("h0") @[InstructionFetch.scala 23:22]
    else :
      io.coreInstrResp.ready <= UInt<1>("h1") @[InstructionFetch.scala 25:30]
      io.coreInstrReq.valid <= UInt<1>("h1") @[InstructionFetch.scala 26:29]
      io.coreInstrReq.bits.activeByteLane <= UInt<4>("hf") @[InstructionFetch.scala 27:43]
      io.coreInstrReq.bits.isWrite <= UInt<1>("h0") @[InstructionFetch.scala 28:36]
      io.coreInstrReq.bits.dataRequest is invalid @[InstructionFetch.scala 30:40]
      io.coreInstrReq.bits.addrRequest <= io.address @[InstructionFetch.scala 31:40]
      io.instruction <= io.coreInstrResp.bits.dataResponse @[InstructionFetch.scala 32:22]


  module Alu :
    input clock : Clock
    input reset : Reset
    output io : { flip op1 : UInt<32>, flip op2 : UInt<32>, flip aluctrl : UInt<5>, aluout : UInt<32>}

    io.aluout <= UInt<1>("h0") @[Alu.scala 41:15]
    node _T = eq(io.aluctrl, UInt<1>("h0")) @[Alu.scala 43:25]
    node _T_1 = eq(io.aluctrl, UInt<1>("h0")) @[Alu.scala 43:51]
    node _T_2 = or(_T, _T_1) @[Alu.scala 43:37]
    when _T_2 : @[Alu.scala 43:65]
      node _io_aluout_T = add(io.op1, io.op2) @[Alu.scala 44:37]
      node _io_aluout_T_1 = tail(_io_aluout_T, 1) @[Alu.scala 44:37]
      io.aluout <= _io_aluout_T_1 @[Alu.scala 44:27]
    else :
      node _T_3 = eq(io.aluctrl, UInt<4>("h8")) @[Alu.scala 45:27]
      when _T_3 : @[Alu.scala 45:39]
        node _io_aluout_T_2 = sub(io.op1, io.op2) @[Alu.scala 46:37]
        node _io_aluout_T_3 = tail(_io_aluout_T_2, 1) @[Alu.scala 46:37]
        io.aluout <= _io_aluout_T_3 @[Alu.scala 46:27]
      else :
        node _T_4 = eq(io.aluctrl, UInt<3>("h7")) @[Alu.scala 47:27]
        node _T_5 = eq(io.aluctrl, UInt<3>("h7")) @[Alu.scala 47:53]
        node _T_6 = or(_T_4, _T_5) @[Alu.scala 47:39]
        when _T_6 : @[Alu.scala 47:67]
          node _io_aluout_T_4 = and(io.op1, io.op2) @[Alu.scala 48:37]
          io.aluout <= _io_aluout_T_4 @[Alu.scala 48:27]
        else :
          node _T_7 = eq(io.aluctrl, UInt<3>("h6")) @[Alu.scala 49:27]
          node _T_8 = eq(io.aluctrl, UInt<3>("h6")) @[Alu.scala 49:52]
          node _T_9 = or(_T_7, _T_8) @[Alu.scala 49:38]
          when _T_9 : @[Alu.scala 49:65]
            node _io_aluout_T_5 = or(io.op1, io.op2) @[Alu.scala 50:37]
            io.aluout <= _io_aluout_T_5 @[Alu.scala 50:27]
          else :
            node _T_10 = eq(io.aluctrl, UInt<3>("h4")) @[Alu.scala 51:27]
            node _T_11 = eq(io.aluctrl, UInt<3>("h4")) @[Alu.scala 51:52]
            node _T_12 = or(_T_10, _T_11) @[Alu.scala 51:39]
            when _T_12 : @[Alu.scala 51:66]
              node _io_aluout_T_6 = xor(io.op1, io.op2) @[Alu.scala 52:37]
              io.aluout <= _io_aluout_T_6 @[Alu.scala 52:27]
            else :
              node _T_13 = eq(io.aluctrl, UInt<2>("h2")) @[Alu.scala 53:27]
              node _T_14 = eq(io.aluctrl, UInt<2>("h2")) @[Alu.scala 53:53]
              node _T_15 = or(_T_13, _T_14) @[Alu.scala 53:39]
              when _T_15 : @[Alu.scala 53:67]
                node _T_16 = lt(io.op1, io.op2) @[Alu.scala 54:29]
                when _T_16 : @[Alu.scala 54:38]
                  io.aluout <= UInt<1>("h1") @[Alu.scala 55:35]
                else :
                  io.aluout <= UInt<1>("h0") @[Alu.scala 57:35]
              else :
                node _T_17 = eq(io.aluctrl, UInt<1>("h1")) @[Alu.scala 59:31]
                node _T_18 = eq(io.aluctrl, UInt<1>("h1")) @[Alu.scala 59:56]
                node _T_19 = or(_T_17, _T_18) @[Alu.scala 59:43]
                when _T_19 : @[Alu.scala 59:70]
                  node _io_aluout_T_7 = bits(io.op2, 4, 0) @[Alu.scala 60:46]
                  node _io_aluout_T_8 = dshl(io.op1, _io_aluout_T_7) @[Alu.scala 60:37]
                  io.aluout <= _io_aluout_T_8 @[Alu.scala 60:26]
                else :
                  node _T_20 = eq(io.aluctrl, UInt<2>("h3")) @[Alu.scala 61:31]
                  node _T_21 = eq(io.aluctrl, UInt<2>("h3")) @[Alu.scala 61:57]
                  node _T_22 = or(_T_20, _T_21) @[Alu.scala 61:44]
                  when _T_22 : @[Alu.scala 61:71]
                    node _T_23 = lt(io.op1, io.op2) @[Alu.scala 64:26]
                    when _T_23 : @[Alu.scala 64:32]
                      io.aluout <= UInt<1>("h1") @[Alu.scala 65:35]
                    else :
                      io.aluout <= UInt<1>("h0") @[Alu.scala 67:35]
                  else :
                    node _T_24 = eq(io.aluctrl, UInt<3>("h5")) @[Alu.scala 69:31]
                    node _T_25 = eq(io.aluctrl, UInt<3>("h5")) @[Alu.scala 69:57]
                    node _T_26 = or(_T_24, _T_25) @[Alu.scala 69:43]
                    when _T_26 : @[Alu.scala 69:71]
                      node _shift_T = bits(io.op2, 4, 0) @[Alu.scala 70:53]
                      node shift = dshr(io.op1, _shift_T) @[Alu.scala 70:43]
                      io.aluout <= shift @[Alu.scala 71:27]
                    else :
                      node _T_27 = eq(io.aluctrl, UInt<4>("hd")) @[Alu.scala 72:31]
                      node _T_28 = eq(io.aluctrl, UInt<3>("h5")) @[Alu.scala 72:57]
                      node _T_29 = or(_T_27, _T_28) @[Alu.scala 72:43]
                      when _T_29 : @[Alu.scala 72:70]
                        node _io_aluout_T_9 = bits(io.op2, 4, 0) @[Alu.scala 73:47]
                        node _io_aluout_T_10 = dshr(io.op1, _io_aluout_T_9) @[Alu.scala 73:38]
                        io.aluout <= _io_aluout_T_10 @[Alu.scala 73:27]
                      else :
                        node _T_30 = eq(io.aluctrl, UInt<5>("h1f")) @[Alu.scala 74:31]
                        when _T_30 : @[Alu.scala 74:46]
                          io.aluout <= io.op1 @[Alu.scala 75:27]


  module Alucontrol :
    input clock : Clock
    input reset : Reset
    output io : { flip Aluop : UInt<3>, flip func7 : UInt<7>, flip func3 : UInt<3>, aluctrl : UInt<5>}

    io.aluctrl <= UInt<1>("h0") @[Alucontrol.scala 12:16]
    node _T = eq(io.Aluop, UInt<1>("h0")) @[Alucontrol.scala 14:20]
    when _T : @[Alucontrol.scala 14:33]
      node io_aluctrl_hi = cat(UInt<1>("h0"), io.func7) @[Cat.scala 33:92]
      node _io_aluctrl_T = cat(io_aluctrl_hi, io.func3) @[Cat.scala 33:92]
      io.aluctrl <= _io_aluctrl_T @[Alucontrol.scala 15:20]
    else :
      node _T_1 = eq(io.Aluop, UInt<1>("h1")) @[Alucontrol.scala 16:29]
      when _T_1 : @[Alucontrol.scala 16:42]
        node _io_aluctrl_T_1 = cat(UInt<1>("h0"), io.func3) @[Cat.scala 33:92]
        io.aluctrl <= _io_aluctrl_T_1 @[Alucontrol.scala 17:24]
      else :
        node _T_2 = eq(io.Aluop, UInt<3>("h5")) @[Alucontrol.scala 18:29]
        node _T_3 = eq(io.Aluop, UInt<3>("h4")) @[Alucontrol.scala 18:54]
        node _T_4 = or(_T_2, _T_3) @[Alucontrol.scala 18:42]
        when _T_4 : @[Alucontrol.scala 18:67]
          io.aluctrl <= UInt<1>("h0") @[Alucontrol.scala 19:24]
        else :
          node _T_5 = eq(io.Aluop, UInt<2>("h3")) @[Alucontrol.scala 20:29]
          when _T_5 : @[Alucontrol.scala 20:42]
            io.aluctrl <= UInt<5>("h1f") @[Alucontrol.scala 21:24]
          else :
            node _T_6 = eq(io.Aluop, UInt<2>("h2")) @[Alucontrol.scala 22:29]
            when _T_6 : @[Alucontrol.scala 22:42]
              node _io_aluctrl_T_2 = cat(UInt<2>("h2"), io.func3) @[Cat.scala 33:92]
              io.aluctrl <= _io_aluctrl_T_2 @[Alucontrol.scala 23:24]
            else :
              node _T_7 = eq(io.Aluop, UInt<3>("h6")) @[Alucontrol.scala 24:29]
              when _T_7 : @[Alucontrol.scala 24:42]
                io.aluctrl <= UInt<1>("h0") @[Alucontrol.scala 25:24]


  module Branchcontrol :
    input clock : Clock
    input reset : Reset
    output io : { flip RS1 : SInt<32>, flip RS2 : SInt<32>, flip func3 : UInt<3>, branchctrl : UInt<1>}

    io.branchctrl <= UInt<1>("h0") @[Branchcontrol.scala 12:17]
    node _T = eq(io.func3, UInt<1>("h0")) @[Branchcontrol.scala 14:17]
    when _T : @[Branchcontrol.scala 14:31]
      node _T_1 = eq(io.RS1, io.RS2) @[Branchcontrol.scala 15:17]
      when _T_1 : @[Branchcontrol.scala 15:29]
        io.branchctrl <= UInt<1>("h1") @[Branchcontrol.scala 16:21]
    else :
      node _T_2 = eq(io.func3, UInt<1>("h1")) @[Branchcontrol.scala 18:25]
      when _T_2 : @[Branchcontrol.scala 18:39]
        node _T_3 = neq(io.RS1, io.RS2) @[Branchcontrol.scala 19:21]
        when _T_3 : @[Branchcontrol.scala 19:33]
          io.branchctrl <= UInt<1>("h1") @[Branchcontrol.scala 20:27]
      else :
        node _T_4 = eq(io.func3, UInt<3>("h4")) @[Branchcontrol.scala 22:25]
        when _T_4 : @[Branchcontrol.scala 22:39]
          node _T_5 = lt(io.RS1, io.RS2) @[Branchcontrol.scala 23:21]
          when _T_5 : @[Branchcontrol.scala 23:31]
            io.branchctrl <= UInt<1>("h1") @[Branchcontrol.scala 24:27]
        else :
          node _T_6 = eq(io.func3, UInt<3>("h5")) @[Branchcontrol.scala 26:25]
          when _T_6 : @[Branchcontrol.scala 26:39]
            node _T_7 = geq(io.RS1, io.RS2) @[Branchcontrol.scala 27:21]
            when _T_7 : @[Branchcontrol.scala 27:32]
              io.branchctrl <= UInt<1>("h1") @[Branchcontrol.scala 28:27]
          else :
            node _T_8 = eq(io.func3, UInt<3>("h6")) @[Branchcontrol.scala 30:25]
            when _T_8 : @[Branchcontrol.scala 30:39]
              node _T_9 = asUInt(io.RS1) @[Branchcontrol.scala 31:21]
              node _T_10 = asUInt(io.RS2) @[Branchcontrol.scala 31:37]
              node _T_11 = lt(_T_9, _T_10) @[Branchcontrol.scala 31:28]
              when _T_11 : @[Branchcontrol.scala 31:45]
                io.branchctrl <= UInt<1>("h1") @[Branchcontrol.scala 32:27]
            else :
              node _T_12 = eq(io.func3, UInt<3>("h7")) @[Branchcontrol.scala 34:25]
              when _T_12 : @[Branchcontrol.scala 34:39]
                node _T_13 = asUInt(io.RS1) @[Branchcontrol.scala 35:21]
                node _T_14 = asUInt(io.RS2) @[Branchcontrol.scala 35:38]
                node _T_15 = geq(_T_13, _T_14) @[Branchcontrol.scala 35:28]
                when _T_15 : @[Branchcontrol.scala 35:46]
                  io.branchctrl <= UInt<1>("h1") @[Branchcontrol.scala 36:27]
              else :
                io.branchctrl <= UInt<1>("h0") @[Branchcontrol.scala 39:23]


  module BranchForwardingUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip IDEX_RD : UInt<5>, flip EXMEM_RD : UInt<5>, flip MEMWB_RD : UInt<5>, flip IDEX_MemRead : UInt<1>, flip EXMEM_MemRead : UInt<1>, flip MEMWB_MemRead : UInt<1>, flip RS1 : UInt<5>, flip RS2 : UInt<5>, flip Branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}

    io.forward_rs1 <= UInt<1>("h0") @[BranchForwardingUnit.scala 20:18]
    io.forward_rs2 <= UInt<1>("h0") @[BranchForwardingUnit.scala 21:18]
    node _T = eq(io.Branch, UInt<1>("h1")) @[BranchForwardingUnit.scala 23:18]
    when _T : @[BranchForwardingUnit.scala 23:27]
      node _T_1 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 24:21]
      node _T_2 = eq(io.IDEX_MemRead, UInt<1>("h0")) @[BranchForwardingUnit.scala 24:48]
      node _T_3 = and(_T_1, _T_2) @[BranchForwardingUnit.scala 24:29]
      node _T_4 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 25:21]
      node _T_5 = and(_T_3, _T_4) @[BranchForwardingUnit.scala 25:7]
      node _T_6 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 25:46]
      node _T_7 = and(_T_5, _T_6) @[BranchForwardingUnit.scala 25:32]
      when _T_7 : @[BranchForwardingUnit.scala 25:58]
        io.forward_rs1 <= UInt<1>("h1") @[BranchForwardingUnit.scala 26:22]
        io.forward_rs2 <= UInt<1>("h1") @[BranchForwardingUnit.scala 27:22]
      else :
        node _T_8 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 28:27]
        node _T_9 = eq(io.IDEX_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 28:54]
        node _T_10 = and(_T_8, _T_9) @[BranchForwardingUnit.scala 28:35]
        node _T_11 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 28:76]
        node _T_12 = and(_T_10, _T_11) @[BranchForwardingUnit.scala 28:62]
        when _T_12 : @[BranchForwardingUnit.scala 28:88]
          io.forward_rs1 <= UInt<1>("h1") @[BranchForwardingUnit.scala 29:22]
        else :
          node _T_13 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 30:27]
          node _T_14 = eq(io.IDEX_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 30:54]
          node _T_15 = and(_T_13, _T_14) @[BranchForwardingUnit.scala 30:35]
          node _T_16 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 30:76]
          node _T_17 = and(_T_15, _T_16) @[BranchForwardingUnit.scala 30:62]
          when _T_17 : @[BranchForwardingUnit.scala 30:88]
            io.forward_rs2 <= UInt<1>("h1") @[BranchForwardingUnit.scala 31:22]
      node _T_18 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 33:22]
      node _T_19 = neq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 33:50]
      node _T_20 = and(_T_18, _T_19) @[BranchForwardingUnit.scala 33:30]
      node _T_21 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 34:23]
      node _T_22 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 34:45]
      node _T_23 = and(_T_21, _T_22) @[BranchForwardingUnit.scala 34:31]
      node _T_24 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 34:70]
      node _T_25 = and(_T_23, _T_24) @[BranchForwardingUnit.scala 34:56]
      node _T_26 = eq(_T_25, UInt<1>("h0")) @[BranchForwardingUnit.scala 34:10]
      node _T_27 = and(_T_20, _T_26) @[BranchForwardingUnit.scala 33:58]
      node _T_28 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 35:22]
      node _T_29 = and(_T_27, _T_28) @[BranchForwardingUnit.scala 34:82]
      node _T_30 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 35:48]
      node _T_31 = and(_T_29, _T_30) @[BranchForwardingUnit.scala 35:33]
      when _T_31 : @[BranchForwardingUnit.scala 35:60]
        io.forward_rs1 <= UInt<2>("h2") @[BranchForwardingUnit.scala 36:26]
        io.forward_rs2 <= UInt<2>("h2") @[BranchForwardingUnit.scala 37:26]
      else :
        node _T_32 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 38:28]
        node _T_33 = eq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 38:56]
        node _T_34 = and(_T_32, _T_33) @[BranchForwardingUnit.scala 38:36]
        node _T_35 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 39:22]
        node _T_36 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 39:44]
        node _T_37 = and(_T_35, _T_36) @[BranchForwardingUnit.scala 39:30]
        node _T_38 = and(_T_34, _T_37) @[BranchForwardingUnit.scala 38:64]
        node _T_39 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 40:22]
        node _T_40 = and(_T_38, _T_39) @[BranchForwardingUnit.scala 39:56]
        when _T_40 : @[BranchForwardingUnit.scala 40:34]
          io.forward_rs2 <= UInt<2>("h2") @[BranchForwardingUnit.scala 41:26]
        else :
          node _T_41 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 42:28]
          node _T_42 = neq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 42:56]
          node _T_43 = and(_T_41, _T_42) @[BranchForwardingUnit.scala 42:36]
          node _T_44 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 43:23]
          node _T_45 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 43:45]
          node _T_46 = and(_T_44, _T_45) @[BranchForwardingUnit.scala 43:31]
          node _T_47 = eq(_T_46, UInt<1>("h0")) @[BranchForwardingUnit.scala 43:10]
          node _T_48 = and(_T_43, _T_47) @[BranchForwardingUnit.scala 42:64]
          node _T_49 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 44:22]
          node _T_50 = and(_T_48, _T_49) @[BranchForwardingUnit.scala 43:57]
          when _T_50 : @[BranchForwardingUnit.scala 44:34]
            io.forward_rs1 <= UInt<2>("h2") @[BranchForwardingUnit.scala 45:26]
          else :
            node _T_51 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 47:28]
            node _T_52 = eq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 47:63]
            node _T_53 = and(_T_51, _T_52) @[BranchForwardingUnit.scala 47:43]
            node _T_54 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 48:21]
            node _T_55 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 48:52]
            node _T_56 = and(_T_54, _T_55) @[BranchForwardingUnit.scala 48:37]
            node _T_57 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 49:22]
            node _T_58 = and(_T_56, _T_57) @[BranchForwardingUnit.scala 49:7]
            node _T_59 = eq(_T_58, UInt<1>("h0")) @[BranchForwardingUnit.scala 48:7]
            node _T_60 = and(_T_53, _T_59) @[BranchForwardingUnit.scala 47:71]
            node _T_61 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 49:50]
            node _T_62 = and(_T_60, _T_61) @[BranchForwardingUnit.scala 49:35]
            node _T_63 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 50:23]
            node _T_64 = and(_T_62, _T_63) @[BranchForwardingUnit.scala 50:7]
            when _T_64 : @[BranchForwardingUnit.scala 50:36]
              io.forward_rs1 <= UInt<3>("h4") @[BranchForwardingUnit.scala 51:24]
              io.forward_rs2 <= UInt<3>("h4") @[BranchForwardingUnit.scala 52:24]
            else :
              node _T_65 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 53:28]
              node _T_66 = eq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 53:63]
              node _T_67 = and(_T_65, _T_66) @[BranchForwardingUnit.scala 53:43]
              node _T_68 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 54:21]
              node _T_69 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 54:52]
              node _T_70 = and(_T_68, _T_69) @[BranchForwardingUnit.scala 54:37]
              node _T_71 = eq(_T_70, UInt<1>("h0")) @[BranchForwardingUnit.scala 54:7]
              node _T_72 = and(_T_67, _T_71) @[BranchForwardingUnit.scala 53:71]
              node _T_73 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 55:20]
              node _T_74 = and(_T_72, _T_73) @[BranchForwardingUnit.scala 54:65]
              when _T_74 : @[BranchForwardingUnit.scala 55:33]
                io.forward_rs2 <= UInt<3>("h4") @[BranchForwardingUnit.scala 56:24]
              else :
                node _T_75 = eq(io.Branch, UInt<1>("h1")) @[BranchForwardingUnit.scala 57:26]
                node _T_76 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 57:49]
                node _T_77 = and(_T_75, _T_76) @[BranchForwardingUnit.scala 57:34]
                node _T_78 = eq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 58:27]
                node _T_79 = and(_T_77, _T_78) @[BranchForwardingUnit.scala 58:7]
                node _T_80 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 58:52]
                node _T_81 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 59:22]
                node _T_82 = and(_T_80, _T_81) @[BranchForwardingUnit.scala 59:7]
                node _T_83 = eq(_T_82, UInt<1>("h0")) @[BranchForwardingUnit.scala 58:38]
                node _T_84 = and(_T_79, _T_83) @[BranchForwardingUnit.scala 58:35]
                node _T_85 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 59:51]
                node _T_86 = and(_T_84, _T_85) @[BranchForwardingUnit.scala 59:35]
                when _T_86 : @[BranchForwardingUnit.scala 59:64]
                  io.forward_rs1 <= UInt<3>("h4") @[BranchForwardingUnit.scala 60:24]
      node _T_87 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 62:22]
      node _T_88 = neq(io.MEMWB_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 62:50]
      node _T_89 = and(_T_87, _T_88) @[BranchForwardingUnit.scala 62:30]
      node _T_90 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 63:23]
      node _T_91 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 63:45]
      node _T_92 = and(_T_90, _T_91) @[BranchForwardingUnit.scala 63:31]
      node _T_93 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 63:70]
      node _T_94 = and(_T_92, _T_93) @[BranchForwardingUnit.scala 63:56]
      node _T_95 = eq(_T_94, UInt<1>("h0")) @[BranchForwardingUnit.scala 63:10]
      node _T_96 = and(_T_89, _T_95) @[BranchForwardingUnit.scala 62:58]
      node _T_97 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 64:24]
      node _T_98 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 64:47]
      node _T_99 = and(_T_97, _T_98) @[BranchForwardingUnit.scala 64:32]
      node _T_100 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 64:73]
      node _T_101 = and(_T_99, _T_100) @[BranchForwardingUnit.scala 64:58]
      node _T_102 = eq(_T_101, UInt<1>("h0")) @[BranchForwardingUnit.scala 64:10]
      node _T_103 = and(_T_96, _T_102) @[BranchForwardingUnit.scala 63:82]
      node _T_104 = eq(io.MEMWB_RD, io.RS1) @[BranchForwardingUnit.scala 65:22]
      node _T_105 = and(_T_103, _T_104) @[BranchForwardingUnit.scala 64:85]
      node _T_106 = eq(io.MEMWB_RD, io.RS2) @[BranchForwardingUnit.scala 65:48]
      node _T_107 = and(_T_105, _T_106) @[BranchForwardingUnit.scala 65:33]
      when _T_107 : @[BranchForwardingUnit.scala 65:60]
        io.forward_rs1 <= UInt<2>("h3") @[BranchForwardingUnit.scala 66:22]
        io.forward_rs2 <= UInt<2>("h3") @[BranchForwardingUnit.scala 67:22]
      else :
        node _T_108 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 68:28]
        node _T_109 = neq(io.MEMWB_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 68:56]
        node _T_110 = and(_T_108, _T_109) @[BranchForwardingUnit.scala 68:36]
        node _T_111 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 69:23]
        node _T_112 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 69:45]
        node _T_113 = and(_T_111, _T_112) @[BranchForwardingUnit.scala 69:31]
        node _T_114 = eq(_T_113, UInt<1>("h0")) @[BranchForwardingUnit.scala 69:10]
        node _T_115 = and(_T_110, _T_114) @[BranchForwardingUnit.scala 68:64]
        node _T_116 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 70:24]
        node _T_117 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 70:47]
        node _T_118 = and(_T_116, _T_117) @[BranchForwardingUnit.scala 70:32]
        node _T_119 = eq(_T_118, UInt<1>("h0")) @[BranchForwardingUnit.scala 70:10]
        node _T_120 = and(_T_115, _T_119) @[BranchForwardingUnit.scala 69:57]
        node _T_121 = eq(io.MEMWB_RD, io.RS2) @[BranchForwardingUnit.scala 71:22]
        node _T_122 = and(_T_120, _T_121) @[BranchForwardingUnit.scala 70:59]
        when _T_122 : @[BranchForwardingUnit.scala 71:34]
          io.forward_rs2 <= UInt<2>("h3") @[BranchForwardingUnit.scala 72:26]
        else :
          node _T_123 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 73:28]
          node _T_124 = neq(io.MEMWB_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 73:56]
          node _T_125 = and(_T_123, _T_124) @[BranchForwardingUnit.scala 73:36]
          node _T_126 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 74:23]
          node _T_127 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 74:45]
          node _T_128 = and(_T_126, _T_127) @[BranchForwardingUnit.scala 74:31]
          node _T_129 = eq(_T_128, UInt<1>("h0")) @[BranchForwardingUnit.scala 74:10]
          node _T_130 = and(_T_125, _T_129) @[BranchForwardingUnit.scala 73:64]
          node _T_131 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 75:24]
          node _T_132 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 75:47]
          node _T_133 = and(_T_131, _T_132) @[BranchForwardingUnit.scala 75:32]
          node _T_134 = eq(_T_133, UInt<1>("h0")) @[BranchForwardingUnit.scala 75:10]
          node _T_135 = and(_T_130, _T_134) @[BranchForwardingUnit.scala 74:57]
          node _T_136 = eq(io.MEMWB_RD, io.RS1) @[BranchForwardingUnit.scala 76:22]
          node _T_137 = and(_T_135, _T_136) @[BranchForwardingUnit.scala 75:59]
          when _T_137 : @[BranchForwardingUnit.scala 76:34]
            io.forward_rs1 <= UInt<2>("h3") @[BranchForwardingUnit.scala 77:26]
          else :
            node _T_138 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 78:28]
            node _T_139 = eq(io.MEMWB_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 78:56]
            node _T_140 = and(_T_138, _T_139) @[BranchForwardingUnit.scala 78:36]
            node _T_141 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 79:23]
            node _T_142 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 79:45]
            node _T_143 = and(_T_141, _T_142) @[BranchForwardingUnit.scala 79:31]
            node _T_144 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 79:70]
            node _T_145 = and(_T_143, _T_144) @[BranchForwardingUnit.scala 79:56]
            node _T_146 = eq(_T_145, UInt<1>("h0")) @[BranchForwardingUnit.scala 79:10]
            node _T_147 = and(_T_140, _T_146) @[BranchForwardingUnit.scala 78:64]
            node _T_148 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 80:24]
            node _T_149 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 80:47]
            node _T_150 = and(_T_148, _T_149) @[BranchForwardingUnit.scala 80:32]
            node _T_151 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 80:73]
            node _T_152 = and(_T_150, _T_151) @[BranchForwardingUnit.scala 80:58]
            node _T_153 = eq(_T_152, UInt<1>("h0")) @[BranchForwardingUnit.scala 80:10]
            node _T_154 = and(_T_147, _T_153) @[BranchForwardingUnit.scala 79:82]
            node _T_155 = eq(io.MEMWB_RD, io.RS1) @[BranchForwardingUnit.scala 81:22]
            node _T_156 = and(_T_154, _T_155) @[BranchForwardingUnit.scala 80:85]
            node _T_157 = eq(io.MEMWB_RD, io.RS2) @[BranchForwardingUnit.scala 81:48]
            node _T_158 = and(_T_156, _T_157) @[BranchForwardingUnit.scala 81:33]
            when _T_158 : @[BranchForwardingUnit.scala 81:60]
              io.forward_rs1 <= UInt<3>("h5") @[BranchForwardingUnit.scala 82:26]
              io.forward_rs2 <= UInt<3>("h5") @[BranchForwardingUnit.scala 83:26]
            else :
              node _T_159 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 84:29]
              node _T_160 = eq(io.MEMWB_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 84:57]
              node _T_161 = and(_T_159, _T_160) @[BranchForwardingUnit.scala 84:37]
              node _T_162 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 85:23]
              node _T_163 = eq(io.IDEX_RD, io.RS2) @[BranchForwardingUnit.scala 85:45]
              node _T_164 = and(_T_162, _T_163) @[BranchForwardingUnit.scala 85:31]
              node _T_165 = eq(_T_164, UInt<1>("h0")) @[BranchForwardingUnit.scala 85:10]
              node _T_166 = and(_T_161, _T_165) @[BranchForwardingUnit.scala 84:65]
              node _T_167 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 86:24]
              node _T_168 = eq(io.EXMEM_RD, io.RS2) @[BranchForwardingUnit.scala 86:47]
              node _T_169 = and(_T_167, _T_168) @[BranchForwardingUnit.scala 86:32]
              node _T_170 = eq(_T_169, UInt<1>("h0")) @[BranchForwardingUnit.scala 86:10]
              node _T_171 = and(_T_166, _T_170) @[BranchForwardingUnit.scala 85:57]
              node _T_172 = eq(io.MEMWB_RD, io.RS2) @[BranchForwardingUnit.scala 87:22]
              node _T_173 = and(_T_171, _T_172) @[BranchForwardingUnit.scala 86:59]
              when _T_173 : @[BranchForwardingUnit.scala 87:34]
                io.forward_rs2 <= UInt<3>("h5") @[BranchForwardingUnit.scala 88:26]
              else :
                node _T_174 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 89:29]
                node _T_175 = eq(io.MEMWB_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 89:57]
                node _T_176 = and(_T_174, _T_175) @[BranchForwardingUnit.scala 89:37]
                node _T_177 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 90:23]
                node _T_178 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 90:45]
                node _T_179 = and(_T_177, _T_178) @[BranchForwardingUnit.scala 90:31]
                node _T_180 = eq(_T_179, UInt<1>("h0")) @[BranchForwardingUnit.scala 90:10]
                node _T_181 = and(_T_176, _T_180) @[BranchForwardingUnit.scala 89:65]
                node _T_182 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 91:24]
                node _T_183 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 91:47]
                node _T_184 = and(_T_182, _T_183) @[BranchForwardingUnit.scala 91:32]
                node _T_185 = eq(_T_184, UInt<1>("h0")) @[BranchForwardingUnit.scala 91:10]
                node _T_186 = and(_T_181, _T_185) @[BranchForwardingUnit.scala 90:57]
                node _T_187 = eq(io.MEMWB_RD, io.RS1) @[BranchForwardingUnit.scala 92:22]
                node _T_188 = and(_T_186, _T_187) @[BranchForwardingUnit.scala 91:59]
                when _T_188 : @[BranchForwardingUnit.scala 92:34]
                  io.forward_rs1 <= UInt<3>("h5") @[BranchForwardingUnit.scala 93:26]
    else :
      node _T_189 = eq(io.Branch, UInt<1>("h0")) @[BranchForwardingUnit.scala 96:23]
      when _T_189 : @[BranchForwardingUnit.scala 96:32]
        node _T_190 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 97:21]
        node _T_191 = neq(io.IDEX_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 97:48]
        node _T_192 = and(_T_190, _T_191) @[BranchForwardingUnit.scala 97:29]
        node _T_193 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 97:70]
        node _T_194 = and(_T_192, _T_193) @[BranchForwardingUnit.scala 97:56]
        when _T_194 : @[BranchForwardingUnit.scala 97:82]
          io.forward_rs1 <= UInt<3>("h6") @[BranchForwardingUnit.scala 98:22]
        node _T_195 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 100:22]
        node _T_196 = neq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 100:50]
        node _T_197 = and(_T_195, _T_196) @[BranchForwardingUnit.scala 100:30]
        node _T_198 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 101:23]
        node _T_199 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 101:45]
        node _T_200 = and(_T_198, _T_199) @[BranchForwardingUnit.scala 101:31]
        node _T_201 = eq(_T_200, UInt<1>("h0")) @[BranchForwardingUnit.scala 101:10]
        node _T_202 = and(_T_197, _T_201) @[BranchForwardingUnit.scala 100:58]
        node _T_203 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 102:22]
        node _T_204 = and(_T_202, _T_203) @[BranchForwardingUnit.scala 101:57]
        when _T_204 : @[BranchForwardingUnit.scala 102:34]
          io.forward_rs1 <= UInt<3>("h7") @[BranchForwardingUnit.scala 103:22]
        else :
          node _T_205 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 104:29]
          node _T_206 = eq(io.EXMEM_MemRead, UInt<1>("h1")) @[BranchForwardingUnit.scala 104:57]
          node _T_207 = and(_T_205, _T_206) @[BranchForwardingUnit.scala 104:37]
          node _T_208 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 105:23]
          node _T_209 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 105:45]
          node _T_210 = and(_T_208, _T_209) @[BranchForwardingUnit.scala 105:31]
          node _T_211 = eq(_T_210, UInt<1>("h0")) @[BranchForwardingUnit.scala 105:10]
          node _T_212 = and(_T_207, _T_211) @[BranchForwardingUnit.scala 104:65]
          node _T_213 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 106:22]
          node _T_214 = and(_T_212, _T_213) @[BranchForwardingUnit.scala 105:57]
          when _T_214 : @[BranchForwardingUnit.scala 106:34]
            io.forward_rs1 <= UInt<4>("h9") @[BranchForwardingUnit.scala 107:22]
        node _T_215 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 109:22]
        node _T_216 = eq(io.MEMWB_MemRead, UInt<1>("h0")) @[BranchForwardingUnit.scala 109:50]
        node _T_217 = and(_T_215, _T_216) @[BranchForwardingUnit.scala 109:30]
        node _T_218 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 110:23]
        node _T_219 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 110:45]
        node _T_220 = and(_T_218, _T_219) @[BranchForwardingUnit.scala 110:31]
        node _T_221 = eq(_T_220, UInt<1>("h0")) @[BranchForwardingUnit.scala 110:10]
        node _T_222 = and(_T_217, _T_221) @[BranchForwardingUnit.scala 109:58]
        node _T_223 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 111:24]
        node _T_224 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 111:47]
        node _T_225 = and(_T_223, _T_224) @[BranchForwardingUnit.scala 111:32]
        node _T_226 = eq(_T_225, UInt<1>("h0")) @[BranchForwardingUnit.scala 111:10]
        node _T_227 = and(_T_222, _T_226) @[BranchForwardingUnit.scala 110:57]
        node _T_228 = eq(io.MEMWB_RD, io.RS1) @[BranchForwardingUnit.scala 112:22]
        node _T_229 = and(_T_227, _T_228) @[BranchForwardingUnit.scala 111:59]
        when _T_229 : @[BranchForwardingUnit.scala 112:34]
          io.forward_rs1 <= UInt<4>("h8") @[BranchForwardingUnit.scala 113:22]
        else :
          node _T_230 = neq(io.MEMWB_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 114:29]
          node _T_231 = neq(io.MEMWB_MemRead, UInt<1>("h0")) @[BranchForwardingUnit.scala 114:57]
          node _T_232 = and(_T_230, _T_231) @[BranchForwardingUnit.scala 114:37]
          node _T_233 = neq(io.IDEX_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 115:23]
          node _T_234 = eq(io.IDEX_RD, io.RS1) @[BranchForwardingUnit.scala 115:45]
          node _T_235 = and(_T_233, _T_234) @[BranchForwardingUnit.scala 115:31]
          node _T_236 = eq(_T_235, UInt<1>("h0")) @[BranchForwardingUnit.scala 115:10]
          node _T_237 = and(_T_232, _T_236) @[BranchForwardingUnit.scala 114:65]
          node _T_238 = neq(io.EXMEM_RD, UInt<1>("h0")) @[BranchForwardingUnit.scala 116:24]
          node _T_239 = eq(io.EXMEM_RD, io.RS1) @[BranchForwardingUnit.scala 116:47]
          node _T_240 = and(_T_238, _T_239) @[BranchForwardingUnit.scala 116:32]
          node _T_241 = eq(_T_240, UInt<1>("h0")) @[BranchForwardingUnit.scala 116:10]
          node _T_242 = and(_T_237, _T_241) @[BranchForwardingUnit.scala 115:57]
          node _T_243 = eq(io.MEMWB_RD, io.RS1) @[BranchForwardingUnit.scala 117:22]
          node _T_244 = and(_T_242, _T_243) @[BranchForwardingUnit.scala 116:59]
          when _T_244 : @[BranchForwardingUnit.scala 117:34]
            io.forward_rs1 <= UInt<4>("ha") @[BranchForwardingUnit.scala 118:22]


  module ControlDecoder :
    input clock : Clock
    input reset : Reset
    output io : { flip opcode : UInt<7>, MemWrite : UInt<1>, MemRead : UInt<1>, Branch : UInt<1>, RegWrite : UInt<1>, Mem2Reg : UInt<1>, Ex_sel : UInt<2>, nextPC : UInt<2>, Aluop : UInt<3>, opA : UInt<2>, opB : UInt<1>}

    io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 21:17]
    io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 22:16]
    io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 23:15]
    io.RegWrite <= UInt<1>("h0") @[ControlDecoder.scala 24:17]
    io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 25:16]
    io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 26:15]
    io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 27:15]
    io.Aluop <= UInt<3>("h7") @[ControlDecoder.scala 28:14]
    io.opA <= UInt<1>("h0") @[ControlDecoder.scala 29:12]
    io.opB <= UInt<1>("h0") @[ControlDecoder.scala 30:12]
    node _T = eq(UInt<6>("h33"), io.opcode) @[ControlDecoder.scala 32:22]
    when _T : @[ControlDecoder.scala 32:22]
      io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 34:25]
      io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 35:24]
      io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 36:23]
      io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 37:25]
      io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 38:24]
      io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 39:23]
      io.Aluop <= UInt<1>("h0") @[ControlDecoder.scala 40:22]
      io.opA <= UInt<1>("h0") @[ControlDecoder.scala 41:20]
      io.opB <= UInt<1>("h0") @[ControlDecoder.scala 42:20]
      io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 43:23]
    else :
      node _T_1 = eq(UInt<5>("h13"), io.opcode) @[ControlDecoder.scala 32:22]
      when _T_1 : @[ControlDecoder.scala 32:22]
        io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 46:25]
        io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 47:24]
        io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 48:23]
        io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 49:25]
        io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 50:24]
        io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 51:23]
        io.Aluop <= UInt<1>("h1") @[ControlDecoder.scala 52:22]
        io.opA <= UInt<1>("h0") @[ControlDecoder.scala 53:20]
        io.opB <= UInt<1>("h1") @[ControlDecoder.scala 54:20]
        io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 55:23]
      else :
        node _T_2 = eq(UInt<6>("h23"), io.opcode) @[ControlDecoder.scala 32:22]
        when _T_2 : @[ControlDecoder.scala 32:22]
          io.MemWrite <= UInt<1>("h1") @[ControlDecoder.scala 58:25]
          io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 59:24]
          io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 60:23]
          io.RegWrite <= UInt<1>("h0") @[ControlDecoder.scala 61:25]
          io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 62:24]
          io.Ex_sel <= UInt<1>("h1") @[ControlDecoder.scala 63:23]
          io.Aluop <= UInt<3>("h5") @[ControlDecoder.scala 64:22]
          io.opA <= UInt<1>("h0") @[ControlDecoder.scala 65:20]
          io.opB <= UInt<1>("h1") @[ControlDecoder.scala 66:20]
          io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 67:23]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.opcode) @[ControlDecoder.scala 32:22]
          when _T_3 : @[ControlDecoder.scala 32:22]
            io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 70:25]
            io.MemRead <= UInt<1>("h1") @[ControlDecoder.scala 71:24]
            io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 72:23]
            io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 73:25]
            io.Mem2Reg <= UInt<1>("h1") @[ControlDecoder.scala 74:24]
            io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 75:23]
            io.Aluop <= UInt<3>("h4") @[ControlDecoder.scala 76:22]
            io.opA <= UInt<1>("h0") @[ControlDecoder.scala 77:20]
            io.opB <= UInt<1>("h1") @[ControlDecoder.scala 78:20]
            io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 79:23]
          else :
            node _T_4 = eq(UInt<7>("h63"), io.opcode) @[ControlDecoder.scala 32:22]
            when _T_4 : @[ControlDecoder.scala 32:22]
              io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 82:25]
              io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 83:24]
              io.Branch <= UInt<1>("h1") @[ControlDecoder.scala 84:23]
              io.RegWrite <= UInt<1>("h0") @[ControlDecoder.scala 85:25]
              io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 86:24]
              io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 87:23]
              io.Aluop <= UInt<2>("h2") @[ControlDecoder.scala 88:22]
              io.opA <= UInt<1>("h0") @[ControlDecoder.scala 89:20]
              io.opB <= UInt<1>("h0") @[ControlDecoder.scala 90:20]
              io.nextPC <= UInt<1>("h1") @[ControlDecoder.scala 91:23]
            else :
              node _T_5 = eq(UInt<7>("h6f"), io.opcode) @[ControlDecoder.scala 32:22]
              when _T_5 : @[ControlDecoder.scala 32:22]
                io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 94:25]
                io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 95:24]
                io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 96:23]
                io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 97:25]
                io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 98:24]
                io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 99:23]
                io.Aluop <= UInt<2>("h3") @[ControlDecoder.scala 100:22]
                io.opA <= UInt<1>("h1") @[ControlDecoder.scala 101:20]
                io.opB <= UInt<1>("h0") @[ControlDecoder.scala 102:20]
                io.nextPC <= UInt<2>("h3") @[ControlDecoder.scala 103:23]
              else :
                node _T_6 = eq(UInt<7>("h67"), io.opcode) @[ControlDecoder.scala 32:22]
                when _T_6 : @[ControlDecoder.scala 32:22]
                  io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 106:25]
                  io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 107:24]
                  io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 108:23]
                  io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 109:25]
                  io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 110:24]
                  io.Ex_sel <= UInt<1>("h0") @[ControlDecoder.scala 111:23]
                  io.Aluop <= UInt<2>("h3") @[ControlDecoder.scala 112:22]
                  io.opA <= UInt<1>("h1") @[ControlDecoder.scala 113:20]
                  io.opB <= UInt<1>("h1") @[ControlDecoder.scala 114:20]
                  io.nextPC <= UInt<2>("h3") @[ControlDecoder.scala 115:23]
                else :
                  node _T_7 = eq(UInt<6>("h37"), io.opcode) @[ControlDecoder.scala 32:22]
                  when _T_7 : @[ControlDecoder.scala 32:22]
                    io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 118:25]
                    io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 119:24]
                    io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 120:23]
                    io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 121:25]
                    io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 122:24]
                    io.Ex_sel <= UInt<2>("h2") @[ControlDecoder.scala 123:23]
                    io.Aluop <= UInt<3>("h6") @[ControlDecoder.scala 124:22]
                    io.opA <= UInt<2>("h2") @[ControlDecoder.scala 125:20]
                    io.opB <= UInt<1>("h1") @[ControlDecoder.scala 126:20]
                    io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 127:23]
                  else :
                    node _T_8 = eq(UInt<5>("h17"), io.opcode) @[ControlDecoder.scala 32:22]
                    when _T_8 : @[ControlDecoder.scala 32:22]
                      io.MemWrite <= UInt<1>("h0") @[ControlDecoder.scala 130:25]
                      io.MemRead <= UInt<1>("h0") @[ControlDecoder.scala 131:24]
                      io.Branch <= UInt<1>("h0") @[ControlDecoder.scala 132:23]
                      io.RegWrite <= UInt<1>("h1") @[ControlDecoder.scala 133:25]
                      io.Mem2Reg <= UInt<1>("h0") @[ControlDecoder.scala 134:24]
                      io.Ex_sel <= UInt<2>("h2") @[ControlDecoder.scala 135:23]
                      io.Aluop <= UInt<3>("h6") @[ControlDecoder.scala 136:22]
                      io.opA <= UInt<2>("h2") @[ControlDecoder.scala 137:20]
                      io.opB <= UInt<1>("h1") @[ControlDecoder.scala 138:20]
                      io.nextPC <= UInt<1>("h0") @[ControlDecoder.scala 139:23]


  module EXMEM :
    input clock : Clock
    input reset : Reset
    output io : { flip ALUres : UInt<32>, flip ReadData2 : UInt<32>, flip RD : UInt<5>, flip MemRead : UInt<1>, flip MemtoReg : UInt<1>, flip MemWrite : UInt<1>, flip RegWrite : UInt<1>, flip func3 : UInt<3>, flip Instr : UInt<32>, flip PC4 : UInt<32>, flip PC : UInt<32>, PC4_EXMEM : UInt<32>, ALUresMEM : UInt<32>, ReadData2MEM : UInt<32>, RDD : UInt<5>, MemReadS : UInt<1>, MemtoRegS : UInt<1>, MemWriteS : UInt<1>, RegWriteS : UInt<1>, func3_EXMEM : UInt<3>, Instr_EXMEM : UInt<32>, PC_EXMEM : UInt<32>}

    reg ALUres_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[EXMEM.scala 60:27]
    ALUres_reg <= io.ALUres @[EXMEM.scala 60:27]
    reg ReadData2_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[EXMEM.scala 61:30]
    ReadData2_reg <= io.ReadData2 @[EXMEM.scala 61:30]
    reg RD_reg : UInt, clock with :
      reset => (reset, UInt<5>("h0")) @[EXMEM.scala 63:23]
    RD_reg <= io.RD @[EXMEM.scala 63:23]
    reg MemRead_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 64:28]
    MemRead_reg <= io.MemRead @[EXMEM.scala 64:28]
    reg MemtoReg_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 65:29]
    MemtoReg_reg <= io.MemtoReg @[EXMEM.scala 65:29]
    reg MemWrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 66:29]
    MemWrite_reg <= io.MemWrite @[EXMEM.scala 66:29]
    reg RegWrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 67:29]
    RegWrite_reg <= io.RegWrite @[EXMEM.scala 67:29]
    reg func3_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 68:26]
    func3_REG <= io.func3 @[EXMEM.scala 68:26]
    reg Instr_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[EXMEM.scala 69:26]
    Instr_reg <= io.Instr @[EXMEM.scala 69:26]
    reg PC4_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 70:24]
    PC4_REG <= io.PC4 @[EXMEM.scala 70:24]
    reg PC_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXMEM.scala 71:24]
    PC_REG <= io.PC @[EXMEM.scala 71:24]
    io.ALUresMEM <= ALUres_reg @[EXMEM.scala 74:16]
    io.PC4_EXMEM <= PC4_REG @[EXMEM.scala 75:16]
    io.ReadData2MEM <= ReadData2_reg @[EXMEM.scala 76:19]
    io.RDD <= RD_reg @[EXMEM.scala 78:10]
    io.MemReadS <= MemRead_reg @[EXMEM.scala 79:15]
    io.MemtoRegS <= MemtoReg_reg @[EXMEM.scala 80:16]
    io.MemWriteS <= MemWrite_reg @[EXMEM.scala 81:16]
    io.RegWriteS <= RegWrite_reg @[EXMEM.scala 82:16]
    io.func3_EXMEM <= func3_REG @[EXMEM.scala 83:18]
    io.Instr_EXMEM <= Instr_reg @[EXMEM.scala 84:18]
    io.PC_EXMEM <= PC_REG @[EXMEM.scala 85:15]

  module Forward :
    input clock : Clock
    input reset : Reset
    output io : { flip RS1 : UInt<5>, flip RS2 : UInt<5>, flip MEMWB_RegWrite : UInt<1>, flip MEMWB_RD : UInt<5>, RS1OUT : UInt<1>, RS2OUT : UInt<1>}

    node _T = eq(io.MEMWB_RD, io.RS1) @[Forward.scala 14:41]
    node _T_1 = and(io.MEMWB_RegWrite, _T) @[Forward.scala 14:26]
    when _T_1 : @[Forward.scala 14:53]
      io.RS1OUT <= UInt<1>("h1") @[Forward.scala 15:15]
    else :
      io.RS1OUT <= UInt<1>("h0") @[Forward.scala 17:15]
    node _T_2 = eq(io.MEMWB_RD, io.RS2) @[Forward.scala 19:41]
    node _T_3 = and(io.MEMWB_RegWrite, _T_2) @[Forward.scala 19:26]
    when _T_3 : @[Forward.scala 19:53]
      io.RS2OUT <= UInt<1>("h1") @[Forward.scala 20:15]
    else :
      io.RS2OUT <= UInt<1>("h0") @[Forward.scala 22:15]


  module ForwardingUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip IDEX_RS1 : UInt<5>, flip IDEX_RS2 : UInt<5>, flip EXMEM_RD : UInt<5>, flip MEMWB_RD : UInt<5>, flip EXMEM_RegWrite : UInt<1>, flip MEMWB_RegWrite : UInt<1>, ForwardA : UInt<2>, ForwardB : UInt<2>}

    io.ForwardA <= UInt<1>("h0") @[ForwardingUnit.scala 87:15]
    io.ForwardB <= UInt<1>("h0") @[ForwardingUnit.scala 88:15]
    node _T = neq(io.EXMEM_RD, UInt<1>("h0")) @[ForwardingUnit.scala 91:42]
    node _T_1 = and(io.EXMEM_RegWrite, _T) @[ForwardingUnit.scala 91:26]
    node _T_2 = eq(io.EXMEM_RD, io.IDEX_RS1) @[ForwardingUnit.scala 91:67]
    node _T_3 = and(_T_1, _T_2) @[ForwardingUnit.scala 91:51]
    when _T_3 : @[ForwardingUnit.scala 91:85]
      io.ForwardA <= UInt<1>("h1") @[ForwardingUnit.scala 92:17]
    else :
      node _T_4 = neq(io.MEMWB_RD, UInt<1>("h0")) @[ForwardingUnit.scala 93:48]
      node _T_5 = and(io.MEMWB_RegWrite, _T_4) @[ForwardingUnit.scala 93:32]
      node _T_6 = eq(io.MEMWB_RD, io.IDEX_RS1) @[ForwardingUnit.scala 94:27]
      node _T_7 = and(_T_5, _T_6) @[ForwardingUnit.scala 93:57]
      node _T_8 = neq(io.EXMEM_RD, UInt<1>("h0")) @[ForwardingUnit.scala 95:50]
      node _T_9 = and(io.EXMEM_RegWrite, _T_8) @[ForwardingUnit.scala 95:34]
      node _T_10 = eq(io.EXMEM_RD, io.IDEX_RS1) @[ForwardingUnit.scala 95:75]
      node _T_11 = and(_T_9, _T_10) @[ForwardingUnit.scala 95:59]
      node _T_12 = eq(_T_11, UInt<1>("h0")) @[ForwardingUnit.scala 95:14]
      node _T_13 = and(_T_7, _T_12) @[ForwardingUnit.scala 94:44]
      when _T_13 : @[ForwardingUnit.scala 95:94]
        io.ForwardA <= UInt<2>("h2") @[ForwardingUnit.scala 96:17]
    node _T_14 = neq(io.EXMEM_RD, UInt<1>("h0")) @[ForwardingUnit.scala 100:42]
    node _T_15 = and(io.EXMEM_RegWrite, _T_14) @[ForwardingUnit.scala 100:26]
    node _T_16 = eq(io.EXMEM_RD, io.IDEX_RS2) @[ForwardingUnit.scala 100:67]
    node _T_17 = and(_T_15, _T_16) @[ForwardingUnit.scala 100:51]
    when _T_17 : @[ForwardingUnit.scala 100:85]
      io.ForwardB <= UInt<1>("h1") @[ForwardingUnit.scala 101:17]
    else :
      node _T_18 = neq(io.MEMWB_RD, UInt<1>("h0")) @[ForwardingUnit.scala 102:48]
      node _T_19 = and(io.MEMWB_RegWrite, _T_18) @[ForwardingUnit.scala 102:32]
      node _T_20 = eq(io.MEMWB_RD, io.IDEX_RS2) @[ForwardingUnit.scala 103:27]
      node _T_21 = and(_T_19, _T_20) @[ForwardingUnit.scala 102:57]
      node _T_22 = neq(io.EXMEM_RD, UInt<1>("h0")) @[ForwardingUnit.scala 104:50]
      node _T_23 = and(io.EXMEM_RegWrite, _T_22) @[ForwardingUnit.scala 104:34]
      node _T_24 = eq(io.EXMEM_RD, io.IDEX_RS2) @[ForwardingUnit.scala 104:75]
      node _T_25 = and(_T_23, _T_24) @[ForwardingUnit.scala 104:59]
      node _T_26 = eq(_T_25, UInt<1>("h0")) @[ForwardingUnit.scala 104:14]
      node _T_27 = and(_T_21, _T_26) @[ForwardingUnit.scala 103:44]
      when _T_27 : @[ForwardingUnit.scala 104:94]
        io.ForwardB <= UInt<2>("h2") @[ForwardingUnit.scala 105:17]


  module HazardUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip IFID_Instruction : UInt<32>, flip IDEX_MemRead : UInt<1>, flip IDEX_RD : UInt<5>, flip PC_In : SInt<32>, flip Current_PC : SInt<32>, Instruction_forward : UInt<1>, PC_forward : UInt<1>, Ctrl_forward : UInt<1>, PC_OUT : SInt<32>, Current_PC_OUT : SInt<32>, Instruction_OUT : UInt<32>}

    node RS1 = bits(io.IFID_Instruction, 19, 15) @[HazardUnit.scala 34:32]
    node RS2 = bits(io.IFID_Instruction, 24, 20) @[HazardUnit.scala 35:32]
    node _T = eq(io.IDEX_MemRead, UInt<1>("h1")) @[HazardUnit.scala 37:24]
    node _T_1 = eq(io.IDEX_RD, RS1) @[HazardUnit.scala 38:21]
    node _T_2 = eq(io.IDEX_RD, RS2) @[HazardUnit.scala 38:45]
    node _T_3 = or(_T_1, _T_2) @[HazardUnit.scala 38:30]
    node _T_4 = and(_T, _T_3) @[HazardUnit.scala 38:5]
    when _T_4 : @[HazardUnit.scala 38:56]
      io.Instruction_forward <= UInt<1>("h1") @[HazardUnit.scala 39:30]
      io.PC_forward <= UInt<1>("h1") @[HazardUnit.scala 40:21]
      io.Ctrl_forward <= UInt<1>("h1") @[HazardUnit.scala 41:23]
      io.Instruction_OUT <= io.IFID_Instruction @[HazardUnit.scala 42:26]
      io.PC_OUT <= io.PC_In @[HazardUnit.scala 43:17]
      io.Current_PC_OUT <= io.Current_PC @[HazardUnit.scala 44:25]
    else :
      io.Instruction_forward <= UInt<1>("h0") @[HazardUnit.scala 46:28]
      io.PC_forward <= UInt<1>("h0") @[HazardUnit.scala 47:19]
      io.Ctrl_forward <= UInt<1>("h0") @[HazardUnit.scala 48:21]
      io.Instruction_OUT <= io.IFID_Instruction @[HazardUnit.scala 49:24]
      io.PC_OUT <= io.PC_In @[HazardUnit.scala 50:15]
      io.Current_PC_OUT <= io.Current_PC @[HazardUnit.scala 51:23]


  module IDEX :
    input clock : Clock
    input reset : Reset
    output io : { flip PC : UInt<32>, flip PC4 : UInt<32>, flip OpA_s : UInt<2>, flip OpB_s : UInt<1>, flip func3 : UInt<3>, flip func7 : UInt<1>, flip Nextpc : UInt<1>, flip Read1 : UInt<32>, flip Read2 : UInt<32>, flip Immd : UInt<32>, flip RD : UInt<5>, flip Branch : UInt<1>, flip MemRead : UInt<1>, flip MemtoReg : UInt<1>, flip ALUOp : UInt<3>, flip MemWrite : UInt<1>, flip RegWrite : UInt<1>, flip RS1_S : UInt<5>, flip RS2_S : UInt<5>, flip Instr : UInt<32>, flip operandA : UInt<32>, flip operandAsel : UInt<1>, PC_IDEX : UInt<32>, PC4_IDEX : UInt<32>, OpA_s_IDEX : UInt<2>, OpB_s_IDEX : UInt<1>, func3_IDEX : UInt<3>, func7_IDEX : UInt<1>, Nextpc_IDEX : UInt<1>, Read1_IDEX : UInt<32>, Read2_IDEX : UInt<32>, Immd_IDEX : UInt<32>, RD_IDEX : UInt<5>, Branch_IDEX : UInt<1>, MemRead_IDEX : UInt<1>, MemtoReg_IDEX : UInt<1>, ALUOp_IDEX : UInt<3>, MemWrite_IDEX : UInt<1>, RegWrite_IDEX : UInt<1>, RS1_S_IDEX : UInt<5>, RS2_S_IDEX : UInt<5>, Instr_IDEX : UInt<32>, operandAout : UInt<32>, operandAselout : UInt<1>}

    reg PC_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 54:24]
    PC_REG <= io.PC @[IDEX.scala 54:24]
    reg PC4_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 55:24]
    PC4_REG <= io.PC4 @[IDEX.scala 55:24]
    reg OpA_s_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 56:26]
    OpA_s_REG <= io.OpA_s @[IDEX.scala 56:26]
    reg OpB_s_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 57:26]
    OpB_s_REG <= io.OpB_s @[IDEX.scala 57:26]
    reg func3_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 58:26]
    func3_REG <= io.func3 @[IDEX.scala 58:26]
    reg func7_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 59:26]
    func7_REG <= io.func7 @[IDEX.scala 59:26]
    reg Nextpc_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 60:27]
    Nextpc_REG <= io.Nextpc @[IDEX.scala 60:27]
    reg Read1_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 61:26]
    Read1_REG <= io.Read1 @[IDEX.scala 61:26]
    reg Read2_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 62:26]
    Read2_REG <= io.Read2 @[IDEX.scala 62:26]
    reg Immd_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 63:25]
    Immd_REG <= io.Immd @[IDEX.scala 63:25]
    reg RD_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 64:23]
    RD_REG <= io.RD @[IDEX.scala 64:23]
    reg Branch_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 65:27]
    Branch_REG <= io.Branch @[IDEX.scala 65:27]
    reg MemRead_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 66:28]
    MemRead_REG <= io.MemRead @[IDEX.scala 66:28]
    reg MemtoReg_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 67:29]
    MemtoReg_REG <= io.MemtoReg @[IDEX.scala 67:29]
    reg ALUOp_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 68:26]
    ALUOp_REG <= io.ALUOp @[IDEX.scala 68:26]
    reg MemWrite_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 69:29]
    MemWrite_REG <= io.MemWrite @[IDEX.scala 69:29]
    reg RegWrite_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 70:29]
    RegWrite_REG <= io.RegWrite @[IDEX.scala 70:29]
    reg RS1_S_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 71:26]
    RS1_S_REG <= io.RS1_S @[IDEX.scala 71:26]
    reg RS2_S_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 72:26]
    RS2_S_REG <= io.RS2_S @[IDEX.scala 72:26]
    reg Instr_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[IDEX.scala 73:26]
    Instr_reg <= io.Instr @[IDEX.scala 73:26]
    reg operandA_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[IDEX.scala 74:29]
    operandA_reg <= io.operandA @[IDEX.scala 74:29]
    reg operandAsel_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDEX.scala 75:32]
    operandAsel_reg <= io.operandAsel @[IDEX.scala 75:32]
    io.PC_IDEX <= PC_REG @[IDEX.scala 77:14]
    io.PC4_IDEX <= PC4_REG @[IDEX.scala 78:15]
    io.OpA_s_IDEX <= OpA_s_REG @[IDEX.scala 79:17]
    io.OpB_s_IDEX <= OpB_s_REG @[IDEX.scala 80:17]
    io.func3_IDEX <= func3_REG @[IDEX.scala 81:17]
    io.func7_IDEX <= func7_REG @[IDEX.scala 82:17]
    io.Nextpc_IDEX <= Nextpc_REG @[IDEX.scala 83:18]
    io.Read1_IDEX <= Read1_REG @[IDEX.scala 84:17]
    io.Read2_IDEX <= Read2_REG @[IDEX.scala 85:17]
    io.Immd_IDEX <= Immd_REG @[IDEX.scala 86:16]
    io.RD_IDEX <= RD_REG @[IDEX.scala 87:14]
    io.Branch_IDEX <= Branch_REG @[IDEX.scala 88:18]
    io.MemRead_IDEX <= MemRead_REG @[IDEX.scala 89:19]
    io.MemtoReg_IDEX <= MemtoReg_REG @[IDEX.scala 90:20]
    io.ALUOp_IDEX <= ALUOp_REG @[IDEX.scala 91:17]
    io.MemWrite_IDEX <= MemWrite_REG @[IDEX.scala 92:20]
    io.RegWrite_IDEX <= RegWrite_REG @[IDEX.scala 93:20]
    io.RS1_S_IDEX <= RS1_S_REG @[IDEX.scala 94:17]
    io.RS2_S_IDEX <= RS2_S_REG @[IDEX.scala 95:17]
    io.Instr_IDEX <= Instr_reg @[IDEX.scala 96:17]
    io.operandAout <= operandA_reg @[IDEX.scala 97:18]
    io.operandAselout <= operandAsel_reg @[IDEX.scala 98:21]

  module IFID :
    input clock : Clock
    input reset : Reset
    output io : { flip Instr : UInt<32>, flip PCout : UInt<32>, flip PC4out : UInt<32>, flip flush : UInt<1>, Instr_IFID : UInt<32>, PCout_IFID : UInt<32>, PC4out_IFID : UInt<32>}

    reg Instr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IFID.scala 15:27]
    reg PCout_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IFID.scala 16:27]
    reg PC4out_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IFID.scala 17:27]
    when io.flush : @[IFID.scala 19:19]
      Instr_reg <= UInt<1>("h0") @[IFID.scala 20:16]
      PCout_reg <= UInt<1>("h0") @[IFID.scala 21:16]
      PC4out_reg <= UInt<1>("h0") @[IFID.scala 22:16]
    else :
      Instr_reg <= io.Instr @[IFID.scala 24:16]
      PCout_reg <= io.PCout @[IFID.scala 25:16]
      PC4out_reg <= io.PC4out @[IFID.scala 26:16]
    io.Instr_IFID <= Instr_reg @[IFID.scala 29:18]
    io.PCout_IFID <= PCout_reg @[IFID.scala 30:18]
    io.PC4out_IFID <= PC4out_reg @[IFID.scala 31:18]

  module ImmediateGen :
    input clock : Clock
    input reset : Reset
    output io : { flip instruction : UInt<32>, flip pc : UInt<32>, imm_out : SInt<32>}

    node opcode = bits(io.instruction, 6, 0) @[ImmediateGeneration.scala 12:30]
    node _i_imm_T = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 15:43]
    node _i_imm_T_1 = bits(_i_imm_T, 0, 0) @[Bitwise.scala 77:15]
    node _i_imm_T_2 = mux(_i_imm_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
    node _i_imm_T_3 = bits(io.instruction, 31, 20) @[ImmediateGeneration.scala 15:64]
    node _i_imm_T_4 = cat(_i_imm_T_2, _i_imm_T_3) @[Cat.scala 33:92]
    node i_imm = asSInt(_i_imm_T_4) @[ImmediateGeneration.scala 15:73]
    node _s_imm_T = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 16:43]
    node _s_imm_T_1 = bits(_s_imm_T, 0, 0) @[Bitwise.scala 77:15]
    node _s_imm_T_2 = mux(_s_imm_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
    node _s_imm_T_3 = bits(io.instruction, 31, 25) @[ImmediateGeneration.scala 16:64]
    node _s_imm_T_4 = bits(io.instruction, 11, 7) @[ImmediateGeneration.scala 16:87]
    node s_imm_hi = cat(_s_imm_T_2, _s_imm_T_3) @[Cat.scala 33:92]
    node _s_imm_T_5 = cat(s_imm_hi, _s_imm_T_4) @[Cat.scala 33:92]
    node s_imm = asSInt(_s_imm_T_5) @[ImmediateGeneration.scala 16:95]
    node _sb_imm_T = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 17:44]
    node _sb_imm_T_1 = bits(_sb_imm_T, 0, 0) @[Bitwise.scala 77:15]
    node _sb_imm_T_2 = mux(_sb_imm_T_1, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 77:12]
    node _sb_imm_T_3 = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 18:34]
    node _sb_imm_T_4 = bits(io.instruction, 7, 7) @[ImmediateGeneration.scala 19:34]
    node _sb_imm_T_5 = bits(io.instruction, 30, 25) @[ImmediateGeneration.scala 20:34]
    node _sb_imm_T_6 = bits(io.instruction, 11, 8) @[ImmediateGeneration.scala 21:34]
    node sb_imm_lo_hi = cat(_sb_imm_T_5, _sb_imm_T_6) @[Cat.scala 33:92]
    node sb_imm_lo = cat(sb_imm_lo_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    node sb_imm_hi_hi = cat(_sb_imm_T_2, _sb_imm_T_3) @[Cat.scala 33:92]
    node sb_imm_hi = cat(sb_imm_hi_hi, _sb_imm_T_4) @[Cat.scala 33:92]
    node _sb_imm_T_7 = cat(sb_imm_hi, sb_imm_lo) @[Cat.scala 33:92]
    node _sb_imm_T_8 = asSInt(_sb_imm_T_7) @[ImmediateGeneration.scala 22:30]
    node _sb_imm_T_9 = asSInt(io.pc) @[ImmediateGeneration.scala 22:45]
    node _sb_imm_T_10 = add(_sb_imm_T_8, _sb_imm_T_9) @[ImmediateGeneration.scala 22:37]
    node _sb_imm_T_11 = tail(_sb_imm_T_10, 1) @[ImmediateGeneration.scala 22:37]
    node sb_imm = asSInt(_sb_imm_T_11) @[ImmediateGeneration.scala 22:37]
    node _u_imm_T = bits(io.instruction, 31, 12) @[ImmediateGeneration.scala 24:33]
    node _u_imm_T_1 = asSInt(_u_imm_T) @[ImmediateGeneration.scala 24:42]
    node u_imm_hi = asUInt(_u_imm_T_1) @[Cat.scala 33:92]
    node _u_imm_T_2 = cat(u_imm_hi, UInt<12>("h0")) @[Cat.scala 33:92]
    node u_imm = asSInt(_u_imm_T_2) @[ImmediateGeneration.scala 24:60]
    node _auipc_imm_T = asSInt(io.pc) @[ImmediateGeneration.scala 26:34]
    node _auipc_imm_T_1 = add(u_imm, _auipc_imm_T) @[ImmediateGeneration.scala 26:26]
    node _auipc_imm_T_2 = tail(_auipc_imm_T_1, 1) @[ImmediateGeneration.scala 26:26]
    node auipc_imm = asSInt(_auipc_imm_T_2) @[ImmediateGeneration.scala 26:26]
    node _uj_imm_T = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 28:44]
    node _uj_imm_T_1 = bits(_uj_imm_T, 0, 0) @[Bitwise.scala 77:15]
    node _uj_imm_T_2 = mux(_uj_imm_T_1, UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 77:12]
    node _uj_imm_T_3 = bits(io.instruction, 31, 31) @[ImmediateGeneration.scala 29:34]
    node _uj_imm_T_4 = bits(io.instruction, 19, 12) @[ImmediateGeneration.scala 30:34]
    node _uj_imm_T_5 = bits(io.instruction, 20, 20) @[ImmediateGeneration.scala 31:34]
    node _uj_imm_T_6 = bits(io.instruction, 30, 21) @[ImmediateGeneration.scala 32:34]
    node uj_imm_lo_hi = cat(_uj_imm_T_5, _uj_imm_T_6) @[Cat.scala 33:92]
    node uj_imm_lo = cat(uj_imm_lo_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    node uj_imm_hi_hi = cat(_uj_imm_T_2, _uj_imm_T_3) @[Cat.scala 33:92]
    node uj_imm_hi = cat(uj_imm_hi_hi, _uj_imm_T_4) @[Cat.scala 33:92]
    node _uj_imm_T_7 = cat(uj_imm_hi, uj_imm_lo) @[Cat.scala 33:92]
    node _uj_imm_T_8 = asSInt(_uj_imm_T_7) @[ImmediateGeneration.scala 33:30]
    node _uj_imm_T_9 = asSInt(io.pc) @[ImmediateGeneration.scala 33:45]
    node _uj_imm_T_10 = add(_uj_imm_T_8, _uj_imm_T_9) @[ImmediateGeneration.scala 33:37]
    node _uj_imm_T_11 = tail(_uj_imm_T_10, 1) @[ImmediateGeneration.scala 33:37]
    node uj_imm = asSInt(_uj_imm_T_11) @[ImmediateGeneration.scala 33:37]
    io.imm_out <= asSInt(UInt<1>("h0")) @[ImmediateGeneration.scala 36:14]
    node _T = eq(UInt<2>("h3"), opcode) @[ImmediateGeneration.scala 38:18]
    when _T : @[ImmediateGeneration.scala 38:18]
      io.imm_out <= i_imm @[ImmediateGeneration.scala 39:35]
    else :
      node _T_1 = eq(UInt<5>("h13"), opcode) @[ImmediateGeneration.scala 38:18]
      when _T_1 : @[ImmediateGeneration.scala 38:18]
        io.imm_out <= i_imm @[ImmediateGeneration.scala 40:35]
      else :
        node _T_2 = eq(UInt<7>("h67"), opcode) @[ImmediateGeneration.scala 38:18]
        when _T_2 : @[ImmediateGeneration.scala 38:18]
          io.imm_out <= i_imm @[ImmediateGeneration.scala 41:35]
        else :
          node _T_3 = eq(UInt<6>("h23"), opcode) @[ImmediateGeneration.scala 38:18]
          when _T_3 : @[ImmediateGeneration.scala 38:18]
            io.imm_out <= s_imm @[ImmediateGeneration.scala 42:35]
          else :
            node _T_4 = eq(UInt<7>("h63"), opcode) @[ImmediateGeneration.scala 38:18]
            when _T_4 : @[ImmediateGeneration.scala 38:18]
              io.imm_out <= sb_imm @[ImmediateGeneration.scala 43:35]
            else :
              node _T_5 = eq(UInt<6>("h37"), opcode) @[ImmediateGeneration.scala 38:18]
              when _T_5 : @[ImmediateGeneration.scala 38:18]
                io.imm_out <= u_imm @[ImmediateGeneration.scala 44:35]
              else :
                node _T_6 = eq(UInt<5>("h17"), opcode) @[ImmediateGeneration.scala 38:18]
                when _T_6 : @[ImmediateGeneration.scala 38:18]
                  io.imm_out <= auipc_imm @[ImmediateGeneration.scala 45:35]
                else :
                  node _T_7 = eq(UInt<7>("h6f"), opcode) @[ImmediateGeneration.scala 38:18]
                  when _T_7 : @[ImmediateGeneration.scala 38:18]
                    io.imm_out <= uj_imm @[ImmediateGeneration.scala 46:35]


  module jalr :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1 : SInt<32>, flip imme : SInt<32>, out : SInt<32>}

    node _pc_T = add(io.rs1, io.imme) @[jalr.scala 11:25]
    node _pc_T_1 = tail(_pc_T, 1) @[jalr.scala 11:25]
    node pc = asSInt(_pc_T_1) @[jalr.scala 11:25]
    node _io_out_T = and(pc, asSInt(UInt<33>("hfffffffe"))) @[jalr.scala 12:22]
    node _io_out_T_1 = asSInt(_io_out_T) @[jalr.scala 12:22]
    io.out <= _io_out_T_1 @[jalr.scala 12:16]

  module MEMWB :
    input clock : Clock
    input reset : Reset
    output io : { flip ReadData : UInt<32>, flip ALUres : UInt<32>, flip RD : UInt<5>, flip MemtoReg : UInt<1>, flip RegWrite : UInt<1>, flip MemRead : UInt<1>, flip MemWrite : UInt<1>, flip Instr : UInt<32>, flip memaddress : UInt<32>, flip memdata : UInt<32>, flip mask : UInt<4>, flip MemWritedata : UInt<32>, flip PC : UInt<32>, MemRead_MEMWB : UInt<1>, ReadData_MEMWB : UInt<32>, ALUres_MEMWB : UInt<32>, RDD_MEMWB : UInt<5>, MemtoReg_MEMWB : UInt<1>, RegWrite_MEMWB : UInt<1>, MemWrite_MEMWB : UInt<1>, Instr_MEMWB : UInt<32>, memaddressD : UInt<32>, memdataD : UInt<32>, mask_out : UInt<4>, MemWritedata_out : UInt<32>, PC_MEMWB : UInt<32>}

    reg MemRead_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 38:28]
    MemRead_reg <= io.MemRead @[MEMWB.scala 38:28]
    reg ReadData_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 39:29]
    ReadData_reg <= io.ReadData @[MEMWB.scala 39:29]
    reg ALUres_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 40:27]
    ALUres_reg <= io.ALUres @[MEMWB.scala 40:27]
    reg RD_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 41:23]
    RD_reg <= io.RD @[MEMWB.scala 41:23]
    reg MemtoReg_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 42:29]
    MemtoReg_reg <= io.MemtoReg @[MEMWB.scala 42:29]
    reg RegWrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 43:29]
    RegWrite_reg <= io.RegWrite @[MEMWB.scala 43:29]
    reg MemWrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 44:29]
    MemWrite_reg <= io.MemWrite @[MEMWB.scala 44:29]
    reg Instr_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[MEMWB.scala 45:26]
    Instr_reg <= io.Instr @[MEMWB.scala 45:26]
    reg memaddress_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[MEMWB.scala 46:31]
    memaddress_reg <= io.memaddress @[MEMWB.scala 46:31]
    reg memdata_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[MEMWB.scala 47:28]
    memdata_reg <= io.memdata @[MEMWB.scala 47:28]
    reg mask_reg : UInt, clock with :
      reset => (reset, UInt<4>("h0")) @[MEMWB.scala 48:26]
    mask_reg <= io.mask @[MEMWB.scala 48:26]
    reg MemWritedata_reg : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[MEMWB.scala 49:33]
    MemWritedata_reg <= io.MemWritedata @[MEMWB.scala 49:33]
    reg PC_REG : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[MEMWB.scala 50:24]
    PC_REG <= io.PC @[MEMWB.scala 50:24]
    io.MemRead_MEMWB <= MemRead_reg @[MEMWB.scala 53:20]
    io.ReadData_MEMWB <= ReadData_reg @[MEMWB.scala 54:21]
    io.ALUres_MEMWB <= ALUres_reg @[MEMWB.scala 55:19]
    io.RDD_MEMWB <= RD_reg @[MEMWB.scala 56:16]
    io.MemtoReg_MEMWB <= MemtoReg_reg @[MEMWB.scala 57:21]
    io.RegWrite_MEMWB <= RegWrite_reg @[MEMWB.scala 58:21]
    io.MemWrite_MEMWB <= MemWrite_reg @[MEMWB.scala 59:21]
    io.Instr_MEMWB <= Instr_reg @[MEMWB.scala 60:18]
    io.memaddressD <= memaddress_reg @[MEMWB.scala 61:18]
    io.memdataD <= memdata_reg @[MEMWB.scala 62:15]
    io.mask_out <= mask_reg @[MEMWB.scala 63:15]
    io.MemWritedata_out <= MemWritedata_reg @[MEMWB.scala 64:23]
    io.PC_MEMWB <= PC_REG @[MEMWB.scala 65:15]

  module RegisterFile :
    input clock : Clock
    input reset : Reset
    output io : { flip RegWrite : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip instruction : UInt<32>, flip writeData : UInt<32>, readData1 : UInt<32>, readData2 : UInt<32>}

    wire _reg_WIRE : UInt<32>[32] @[RegisterFile.scala 16:28]
    _reg_WIRE[0] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[1] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[2] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[3] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[4] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[5] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[6] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[7] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[8] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[9] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[10] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[11] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[12] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[13] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[14] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[15] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[16] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[17] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[18] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[19] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[20] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[21] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[22] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[23] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[24] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[25] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[26] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[27] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[28] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[29] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[30] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    _reg_WIRE[31] <= UInt<32>("h0") @[RegisterFile.scala 16:28]
    reg reg : UInt<32>[32], clock with :
      reset => (reset, _reg_WIRE) @[RegisterFile.scala 16:20]
    node Rs1 = bits(io.instruction, 19, 15) @[RegisterFile.scala 17:27]
    node Rs2 = bits(io.instruction, 24, 20) @[RegisterFile.scala 18:27]
    node _io_readData1_T = neq(Rs1, UInt<1>("h0")) @[RegisterFile.scala 20:27]
    node _io_readData1_T_1 = mux(_io_readData1_T, reg[Rs1], UInt<1>("h0")) @[RegisterFile.scala 20:22]
    io.readData1 <= _io_readData1_T_1 @[RegisterFile.scala 20:16]
    node _io_readData2_T = neq(Rs2, UInt<1>("h0")) @[RegisterFile.scala 21:27]
    node _io_readData2_T_1 = mux(_io_readData2_T, reg[Rs2], UInt<1>("h0")) @[RegisterFile.scala 21:22]
    io.readData2 <= _io_readData2_T_1 @[RegisterFile.scala 21:16]
    node _T = eq(io.RegWrite, UInt<1>("h1")) @[RegisterFile.scala 23:20]
    node _T_1 = neq(io.rd, UInt<1>("h0")) @[RegisterFile.scala 23:37]
    node _T_2 = and(_T, _T_1) @[RegisterFile.scala 23:28]
    when _T_2 : @[RegisterFile.scala 23:46]
      reg[io.rd] <= io.writeData @[RegisterFile.scala 24:16]


  module MemoryFetch :
    input clock : Clock
    input reset : Reset
    output io : { flip aluResultIn : UInt<32>, flip writeData : UInt<32>, flip writeEnable : UInt<1>, flip readEnable : UInt<1>, readData : UInt<32>, Data : UInt<32>, flip f3 : UInt<3>, maskout : UInt<4>, dccmReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dccmRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}, wmask : UInt<4>}

    io.dccmRsp.ready <= UInt<1>("h1") @[MemoryFetch.scala 23:20]
    wire wdata : UInt<8>[4] @[MemoryFetch.scala 25:19]
    wire rdata : UInt<32> @[MemoryFetch.scala 26:19]
    reg offset : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[MemoryFetch.scala 27:23]
    reg funct3 : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[MemoryFetch.scala 28:23]
    node offsetSW = bits(io.aluResultIn, 1, 0) @[MemoryFetch.scala 29:32]
    io.maskout <= UInt<1>("h0") @[MemoryFetch.scala 31:14]
    node _T = eq(io.dccmRsp.valid, UInt<1>("h0")) @[MemoryFetch.scala 33:8]
    when _T : @[MemoryFetch.scala 33:26]
      funct3 <= io.f3 @[MemoryFetch.scala 34:12]
      node _offset_T = bits(io.aluResultIn, 1, 0) @[MemoryFetch.scala 35:29]
      offset <= _offset_T @[MemoryFetch.scala 35:12]
    else :
      funct3 <= funct3 @[MemoryFetch.scala 37:12]
      offset <= offset @[MemoryFetch.scala 38:12]
    node _wdata_0_T = bits(io.writeData, 7, 0) @[MemoryFetch.scala 41:27]
    wdata[0] <= _wdata_0_T @[MemoryFetch.scala 41:12]
    node _wdata_1_T = bits(io.writeData, 15, 8) @[MemoryFetch.scala 42:27]
    wdata[1] <= _wdata_1_T @[MemoryFetch.scala 42:12]
    node _wdata_2_T = bits(io.writeData, 23, 16) @[MemoryFetch.scala 43:27]
    wdata[2] <= _wdata_2_T @[MemoryFetch.scala 43:12]
    node _wdata_3_T = bits(io.writeData, 31, 24) @[MemoryFetch.scala 44:27]
    wdata[3] <= _wdata_3_T @[MemoryFetch.scala 44:12]
    node _T_1 = eq(io.f3, UInt<1>("h0")) @[MemoryFetch.scala 47:32]
    node _T_2 = and(io.writeEnable, _T_1) @[MemoryFetch.scala 47:23]
    when _T_2 : @[MemoryFetch.scala 47:45]
      node _T_3 = eq(offsetSW, UInt<1>("h0")) @[MemoryFetch.scala 48:19]
      when _T_3 : @[MemoryFetch.scala 48:27]
        io.dccmReq.bits.activeByteLane <= UInt<1>("h1") @[MemoryFetch.scala 49:38]
        io.wmask <= UInt<1>("h1") @[MemoryFetch.scala 50:20]
        io.maskout <= UInt<1>("h1") @[MemoryFetch.scala 51:18]
      else :
        node _T_4 = eq(offsetSW, UInt<1>("h1")) @[MemoryFetch.scala 52:25]
        when _T_4 : @[MemoryFetch.scala 52:33]
          node _wdata_0_T_1 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 53:31]
          wdata[0] <= _wdata_0_T_1 @[MemoryFetch.scala 53:16]
          node _wdata_1_T_1 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 54:31]
          wdata[1] <= _wdata_1_T_1 @[MemoryFetch.scala 54:16]
          node _wdata_2_T_1 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 55:31]
          wdata[2] <= _wdata_2_T_1 @[MemoryFetch.scala 55:16]
          node _wdata_3_T_1 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 56:31]
          wdata[3] <= _wdata_3_T_1 @[MemoryFetch.scala 56:16]
          io.dccmReq.bits.activeByteLane <= UInt<2>("h2") @[MemoryFetch.scala 57:38]
          io.wmask <= UInt<2>("h2") @[MemoryFetch.scala 58:20]
          io.maskout <= UInt<2>("h2") @[MemoryFetch.scala 59:18]
        else :
          node _T_5 = eq(offsetSW, UInt<2>("h2")) @[MemoryFetch.scala 60:25]
          when _T_5 : @[MemoryFetch.scala 60:33]
            node _wdata_0_T_2 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 61:31]
            wdata[0] <= _wdata_0_T_2 @[MemoryFetch.scala 61:16]
            node _wdata_1_T_2 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 62:31]
            wdata[1] <= _wdata_1_T_2 @[MemoryFetch.scala 62:16]
            node _wdata_2_T_2 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 63:31]
            wdata[2] <= _wdata_2_T_2 @[MemoryFetch.scala 63:16]
            node _wdata_3_T_2 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 64:31]
            wdata[3] <= _wdata_3_T_2 @[MemoryFetch.scala 64:16]
            io.dccmReq.bits.activeByteLane <= UInt<3>("h4") @[MemoryFetch.scala 65:38]
            io.wmask <= UInt<3>("h4") @[MemoryFetch.scala 66:20]
            io.maskout <= UInt<3>("h4") @[MemoryFetch.scala 67:18]
          else :
            node _wdata_0_T_3 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 69:31]
            wdata[0] <= _wdata_0_T_3 @[MemoryFetch.scala 69:16]
            node _wdata_1_T_3 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 70:31]
            wdata[1] <= _wdata_1_T_3 @[MemoryFetch.scala 70:16]
            node _wdata_2_T_3 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 71:31]
            wdata[2] <= _wdata_2_T_3 @[MemoryFetch.scala 71:16]
            node _wdata_3_T_3 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 72:31]
            wdata[3] <= _wdata_3_T_3 @[MemoryFetch.scala 72:16]
            io.dccmReq.bits.activeByteLane <= UInt<4>("h8") @[MemoryFetch.scala 73:38]
            io.wmask <= UInt<4>("h8") @[MemoryFetch.scala 74:20]
            io.maskout <= UInt<4>("h8") @[MemoryFetch.scala 75:18]
    else :
      node _T_6 = eq(io.f3, UInt<1>("h1")) @[MemoryFetch.scala 79:39]
      node _T_7 = and(io.writeEnable, _T_6) @[MemoryFetch.scala 79:30]
      when _T_7 : @[MemoryFetch.scala 79:52]
        node _T_8 = eq(offsetSW, UInt<1>("h0")) @[MemoryFetch.scala 81:19]
        when _T_8 : @[MemoryFetch.scala 81:27]
          io.dccmReq.bits.activeByteLane <= UInt<2>("h3") @[MemoryFetch.scala 83:38]
          io.wmask <= UInt<2>("h3") @[MemoryFetch.scala 84:20]
          io.maskout <= UInt<2>("h3") @[MemoryFetch.scala 85:18]
        else :
          node _T_9 = eq(offsetSW, UInt<1>("h1")) @[MemoryFetch.scala 86:25]
          when _T_9 : @[MemoryFetch.scala 86:33]
            io.dccmReq.bits.activeByteLane <= UInt<3>("h6") @[MemoryFetch.scala 88:38]
            io.wmask <= UInt<3>("h6") @[MemoryFetch.scala 89:20]
            io.maskout <= UInt<3>("h6") @[MemoryFetch.scala 90:18]
            node _wdata_0_T_4 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 91:31]
            wdata[0] <= _wdata_0_T_4 @[MemoryFetch.scala 91:16]
            node _wdata_1_T_4 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 92:31]
            wdata[1] <= _wdata_1_T_4 @[MemoryFetch.scala 92:16]
            node _wdata_2_T_4 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 93:31]
            wdata[2] <= _wdata_2_T_4 @[MemoryFetch.scala 93:16]
            node _wdata_3_T_4 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 94:31]
            wdata[3] <= _wdata_3_T_4 @[MemoryFetch.scala 94:16]
          else :
            io.dccmReq.bits.activeByteLane <= UInt<4>("hc") @[MemoryFetch.scala 97:38]
            io.wmask <= UInt<4>("hc") @[MemoryFetch.scala 98:20]
            io.maskout <= UInt<4>("hc") @[MemoryFetch.scala 99:18]
            node _wdata_2_T_5 = bits(io.writeData, 7, 0) @[MemoryFetch.scala 100:31]
            wdata[2] <= _wdata_2_T_5 @[MemoryFetch.scala 100:16]
            node _wdata_3_T_5 = bits(io.writeData, 15, 8) @[MemoryFetch.scala 101:31]
            wdata[3] <= _wdata_3_T_5 @[MemoryFetch.scala 101:16]
            node _wdata_0_T_5 = bits(io.writeData, 23, 16) @[MemoryFetch.scala 102:31]
            wdata[0] <= _wdata_0_T_5 @[MemoryFetch.scala 102:16]
            node _wdata_1_T_5 = bits(io.writeData, 31, 24) @[MemoryFetch.scala 103:31]
            wdata[1] <= _wdata_1_T_5 @[MemoryFetch.scala 103:16]
      else :
        io.dccmReq.bits.activeByteLane <= UInt<4>("hf") @[MemoryFetch.scala 108:36]
        node _io_wmask_T = mux(io.writeEnable, UInt<4>("hf"), UInt<1>("h0")) @[MemoryFetch.scala 109:24]
        io.wmask <= _io_wmask_T @[MemoryFetch.scala 109:18]
        node _io_maskout_T = mux(io.writeEnable, UInt<4>("hf"), UInt<1>("h0")) @[MemoryFetch.scala 110:22]
        io.maskout <= _io_maskout_T @[MemoryFetch.scala 110:16]
    node io_dccmReq_bits_dataRequest_lo = cat(wdata[1], wdata[0]) @[MemoryFetch.scala 113:40]
    node io_dccmReq_bits_dataRequest_hi = cat(wdata[3], wdata[2]) @[MemoryFetch.scala 113:40]
    node _io_dccmReq_bits_dataRequest_T = cat(io_dccmReq_bits_dataRequest_hi, io_dccmReq_bits_dataRequest_lo) @[MemoryFetch.scala 113:40]
    io.dccmReq.bits.dataRequest <= _io_dccmReq_bits_dataRequest_T @[MemoryFetch.scala 113:31]
    io.dccmReq.bits.addrRequest <= io.aluResultIn @[MemoryFetch.scala 114:31]
    io.dccmReq.bits.isWrite <= io.writeEnable @[MemoryFetch.scala 115:27]
    node _io_dccmReq_valid_T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 116:42]
    node _io_dccmReq_valid_T_1 = mux(_io_dccmReq_valid_T, UInt<1>("h1"), UInt<1>("h0")) @[MemoryFetch.scala 116:26]
    io.dccmReq.valid <= _io_dccmReq_valid_T_1 @[MemoryFetch.scala 116:20]
    wire _rdata_WIRE : UInt<32> @[MemoryFetch.scala 118:15]
    _rdata_WIRE is invalid @[MemoryFetch.scala 118:15]
    node _rdata_T = mux(io.dccmRsp.valid, io.dccmRsp.bits.dataResponse, _rdata_WIRE) @[MemoryFetch.scala 118:15]
    rdata <= _rdata_T @[MemoryFetch.scala 118:9]
    io.Data <= io.dccmRsp.bits.dataResponse @[MemoryFetch.scala 120:11]
    when io.readEnable : @[MemoryFetch.scala 122:23]
      node _T_10 = eq(funct3, UInt<2>("h2")) @[MemoryFetch.scala 123:17]
      when _T_10 : @[MemoryFetch.scala 123:31]
        io.readData <= rdata @[MemoryFetch.scala 125:19]
      else :
        node _T_11 = eq(funct3, UInt<1>("h0")) @[MemoryFetch.scala 127:24]
        when _T_11 : @[MemoryFetch.scala 127:38]
          node _T_12 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 129:21]
          when _T_12 : @[MemoryFetch.scala 129:34]
            node _io_readData_T = bits(rdata, 7, 7) @[MemoryFetch.scala 131:43]
            node _io_readData_T_1 = bits(_io_readData_T, 0, 0) @[Bitwise.scala 77:15]
            node _io_readData_T_2 = mux(_io_readData_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
            node _io_readData_T_3 = bits(rdata, 7, 0) @[MemoryFetch.scala 131:53]
            node _io_readData_T_4 = cat(_io_readData_T_2, _io_readData_T_3) @[Cat.scala 33:92]
            io.readData <= _io_readData_T_4 @[MemoryFetch.scala 131:23]
          else :
            node _T_13 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 132:28]
            when _T_13 : @[MemoryFetch.scala 132:41]
              node _io_readData_T_5 = bits(rdata, 15, 15) @[MemoryFetch.scala 134:44]
              node _io_readData_T_6 = bits(_io_readData_T_5, 0, 0) @[Bitwise.scala 77:15]
              node _io_readData_T_7 = mux(_io_readData_T_6, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              node _io_readData_T_8 = bits(rdata, 15, 8) @[MemoryFetch.scala 134:55]
              node _io_readData_T_9 = cat(_io_readData_T_7, _io_readData_T_8) @[Cat.scala 33:92]
              io.readData <= _io_readData_T_9 @[MemoryFetch.scala 134:23]
            else :
              node _T_14 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 135:28]
              when _T_14 : @[MemoryFetch.scala 135:41]
                node _io_readData_T_10 = bits(rdata, 23, 23) @[MemoryFetch.scala 137:44]
                node _io_readData_T_11 = bits(_io_readData_T_10, 0, 0) @[Bitwise.scala 77:15]
                node _io_readData_T_12 = mux(_io_readData_T_11, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_13 = bits(rdata, 23, 16) @[MemoryFetch.scala 137:55]
                node _io_readData_T_14 = cat(_io_readData_T_12, _io_readData_T_13) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_14 @[MemoryFetch.scala 137:23]
              else :
                node _T_15 = eq(offset, UInt<2>("h3")) @[MemoryFetch.scala 138:28]
                when _T_15 : @[MemoryFetch.scala 138:41]
                  node _io_readData_T_15 = bits(rdata, 31, 31) @[MemoryFetch.scala 140:44]
                  node _io_readData_T_16 = bits(_io_readData_T_15, 0, 0) @[Bitwise.scala 77:15]
                  node _io_readData_T_17 = mux(_io_readData_T_16, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_18 = bits(rdata, 31, 24) @[MemoryFetch.scala 140:55]
                  node _io_readData_T_19 = cat(_io_readData_T_17, _io_readData_T_18) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_19 @[MemoryFetch.scala 140:23]
                else :
                  io.readData is invalid @[MemoryFetch.scala 143:23]
        else :
          node _T_16 = eq(funct3, UInt<3>("h4")) @[MemoryFetch.scala 146:24]
          when _T_16 : @[MemoryFetch.scala 146:38]
            node _T_17 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 148:21]
            when _T_17 : @[MemoryFetch.scala 148:34]
              node _io_readData_T_20 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              node _io_readData_T_21 = bits(rdata, 7, 0) @[MemoryFetch.scala 150:50]
              node _io_readData_T_22 = cat(_io_readData_T_20, _io_readData_T_21) @[Cat.scala 33:92]
              io.readData <= _io_readData_T_22 @[MemoryFetch.scala 150:23]
            else :
              node _T_18 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 151:27]
              when _T_18 : @[MemoryFetch.scala 151:40]
                node _io_readData_T_23 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_24 = bits(rdata, 15, 8) @[MemoryFetch.scala 153:50]
                node _io_readData_T_25 = cat(_io_readData_T_23, _io_readData_T_24) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_25 @[MemoryFetch.scala 153:23]
              else :
                node _T_19 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 154:27]
                when _T_19 : @[MemoryFetch.scala 154:40]
                  node _io_readData_T_26 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_27 = bits(rdata, 23, 16) @[MemoryFetch.scala 156:50]
                  node _io_readData_T_28 = cat(_io_readData_T_26, _io_readData_T_27) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_28 @[MemoryFetch.scala 156:23]
                else :
                  node _T_20 = eq(offset, UInt<2>("h3")) @[MemoryFetch.scala 157:27]
                  when _T_20 : @[MemoryFetch.scala 157:40]
                    node _io_readData_T_29 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_30 = bits(rdata, 31, 24) @[MemoryFetch.scala 159:50]
                    node _io_readData_T_31 = cat(_io_readData_T_29, _io_readData_T_30) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_31 @[MemoryFetch.scala 159:23]
                  else :
                    io.readData is invalid @[MemoryFetch.scala 162:23]
          else :
            node _T_21 = eq(funct3, UInt<3>("h5")) @[MemoryFetch.scala 165:24]
            when _T_21 : @[MemoryFetch.scala 165:38]
              node _T_22 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 167:21]
              when _T_22 : @[MemoryFetch.scala 167:34]
                node _io_readData_T_32 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                node _io_readData_T_33 = bits(rdata, 15, 0) @[MemoryFetch.scala 169:49]
                node _io_readData_T_34 = cat(_io_readData_T_32, _io_readData_T_33) @[Cat.scala 33:92]
                io.readData <= _io_readData_T_34 @[MemoryFetch.scala 169:23]
              else :
                node _T_23 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 170:28]
                when _T_23 : @[MemoryFetch.scala 170:41]
                  node _io_readData_T_35 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_36 = bits(rdata, 23, 8) @[MemoryFetch.scala 172:49]
                  node _io_readData_T_37 = cat(_io_readData_T_35, _io_readData_T_36) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_37 @[MemoryFetch.scala 172:23]
                else :
                  node _T_24 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 173:28]
                  when _T_24 : @[MemoryFetch.scala 173:41]
                    node _io_readData_T_38 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_39 = bits(rdata, 31, 16) @[MemoryFetch.scala 175:49]
                    node _io_readData_T_40 = cat(_io_readData_T_38, _io_readData_T_39) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_40 @[MemoryFetch.scala 175:23]
                  else :
                    io.readData is invalid @[MemoryFetch.scala 178:23]
            else :
              node _T_25 = eq(funct3, UInt<1>("h1")) @[MemoryFetch.scala 181:24]
              when _T_25 : @[MemoryFetch.scala 181:38]
                node _T_26 = eq(offset, UInt<1>("h0")) @[MemoryFetch.scala 183:21]
                when _T_26 : @[MemoryFetch.scala 183:34]
                  node _io_readData_T_41 = bits(rdata, 15, 15) @[MemoryFetch.scala 185:44]
                  node _io_readData_T_42 = bits(_io_readData_T_41, 0, 0) @[Bitwise.scala 77:15]
                  node _io_readData_T_43 = mux(_io_readData_T_42, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                  node _io_readData_T_44 = bits(rdata, 15, 0) @[MemoryFetch.scala 185:55]
                  node _io_readData_T_45 = cat(_io_readData_T_43, _io_readData_T_44) @[Cat.scala 33:92]
                  io.readData <= _io_readData_T_45 @[MemoryFetch.scala 185:23]
                else :
                  node _T_27 = eq(offset, UInt<1>("h1")) @[MemoryFetch.scala 186:28]
                  when _T_27 : @[MemoryFetch.scala 186:41]
                    node _io_readData_T_46 = bits(rdata, 23, 23) @[MemoryFetch.scala 188:44]
                    node _io_readData_T_47 = bits(_io_readData_T_46, 0, 0) @[Bitwise.scala 77:15]
                    node _io_readData_T_48 = mux(_io_readData_T_47, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _io_readData_T_49 = bits(rdata, 23, 8) @[MemoryFetch.scala 188:55]
                    node _io_readData_T_50 = cat(_io_readData_T_48, _io_readData_T_49) @[Cat.scala 33:92]
                    io.readData <= _io_readData_T_50 @[MemoryFetch.scala 188:23]
                  else :
                    node _T_28 = eq(offset, UInt<2>("h2")) @[MemoryFetch.scala 189:28]
                    when _T_28 : @[MemoryFetch.scala 189:41]
                      node _io_readData_T_51 = bits(rdata, 31, 31) @[MemoryFetch.scala 191:44]
                      node _io_readData_T_52 = bits(_io_readData_T_51, 0, 0) @[Bitwise.scala 77:15]
                      node _io_readData_T_53 = mux(_io_readData_T_52, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                      node _io_readData_T_54 = bits(rdata, 31, 16) @[MemoryFetch.scala 191:55]
                      node _io_readData_T_55 = cat(_io_readData_T_53, _io_readData_T_54) @[Cat.scala 33:92]
                      io.readData <= _io_readData_T_55 @[MemoryFetch.scala 191:23]
                    else :
                      io.readData is invalid @[MemoryFetch.scala 193:23]
              else :
                io.readData is invalid @[MemoryFetch.scala 197:19]
    else :
      io.readData is invalid @[MemoryFetch.scala 200:17]


  module Core :
    input clock : Clock
    input reset : Reset
    output io : { Instruction : UInt<32>, Address : UInt<24>, output : UInt<32>, dmemReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dmemRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}, imemReq : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip imemRsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}, flip rvfi : { flip bool : UInt<1>, flip uint2 : UInt<2>, flip uint4 : UInt<4>, flip uint5 : UInt<5>[3], flip uint32 : UInt<32>[9]}}

    inst pc_module of Programcounter @[Core.scala 27:27]
    pc_module.clock <= clock
    pc_module.reset <= reset
    inst InstructionFetch of InstructionFetch @[Core.scala 28:27]
    InstructionFetch.clock <= clock
    InstructionFetch.reset <= reset
    inst alu_module of Alu @[Core.scala 29:28]
    alu_module.clock <= clock
    alu_module.reset <= reset
    inst alucontrol_module of Alucontrol @[Core.scala 30:35]
    alucontrol_module.clock <= clock
    alucontrol_module.reset <= reset
    inst Branchcontrol_module of Branchcontrol @[Core.scala 31:38]
    Branchcontrol_module.clock <= clock
    Branchcontrol_module.reset <= reset
    inst BranchForward_module of BranchForwardingUnit @[Core.scala 32:38]
    BranchForward_module.clock <= clock
    BranchForward_module.reset <= reset
    inst ControlDecoder_module of ControlDecoder @[Core.scala 33:39]
    ControlDecoder_module.clock <= clock
    ControlDecoder_module.reset <= reset
    inst exmem_module of EXMEM @[Core.scala 34:30]
    exmem_module.clock <= clock
    exmem_module.reset <= reset
    inst Forward_module of Forward @[Core.scala 35:32]
    Forward_module.clock <= clock
    Forward_module.reset <= reset
    inst ForwardingUnit_module of ForwardingUnit @[Core.scala 36:39]
    ForwardingUnit_module.clock <= clock
    ForwardingUnit_module.reset <= reset
    inst HazardDetect_module of HazardUnit @[Core.scala 37:37]
    HazardDetect_module.clock <= clock
    HazardDetect_module.reset <= reset
    inst idex_module of IDEX @[Core.scala 38:29]
    idex_module.clock <= clock
    idex_module.reset <= reset
    inst ifid_module of IFID @[Core.scala 39:29]
    ifid_module.clock <= clock
    ifid_module.reset <= reset
    inst immgen_module of ImmediateGen @[Core.scala 40:31]
    immgen_module.clock <= clock
    immgen_module.reset <= reset
    inst jalr_module of jalr @[Core.scala 41:29]
    jalr_module.clock <= clock
    jalr_module.reset <= reset
    inst memwb_module of MEMWB @[Core.scala 42:30]
    memwb_module.clock <= clock
    memwb_module.reset <= reset
    inst regfile_module of RegisterFile @[Core.scala 43:32]
    regfile_module.clock <= clock
    regfile_module.reset <= reset
    inst MEM of MemoryFetch @[Core.scala 44:21]
    MEM.clock <= clock
    MEM.reset <= reset
    io.imemReq.bits <= InstructionFetch.io.coreInstrReq.bits @[Core.scala 47:16]
    io.imemReq.valid <= InstructionFetch.io.coreInstrReq.valid @[Core.scala 47:16]
    InstructionFetch.io.coreInstrReq.ready <= io.imemReq.ready @[Core.scala 47:16]
    InstructionFetch.io.coreInstrResp <= io.imemRsp @[Core.scala 48:29]
    pc_module.io.in <= pc_module.io.pc4 @[Core.scala 50:21]
    node _T = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 51:37]
    node _T_1 = eq(_T, UInt<7>("h6f")) @[Core.scala 51:44]
    node _T_2 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 51:90]
    node _T_3 = eq(_T_2, UInt<7>("h67")) @[Core.scala 51:97]
    node _T_4 = or(_T_1, _T_3) @[Core.scala 51:61]
    when _T_4 : @[Core.scala 51:115]
      pc_module.io.in <= immgen_module.io.imm_out @[Core.scala 52:24]
    else :
      node _T_5 = eq(Branchcontrol_module.io.branchctrl, UInt<1>("h1")) @[Core.scala 53:52]
      node _T_6 = eq(ControlDecoder_module.io.Branch, UInt<1>("h1")) @[Core.scala 53:95]
      node _T_7 = and(_T_5, _T_6) @[Core.scala 53:60]
      when _T_7 : @[Core.scala 53:105]
        node _pc_module_io_in_T = sub(immgen_module.io.imm_out, asSInt(UInt<4>("h4"))) @[Core.scala 54:54]
        node _pc_module_io_in_T_1 = tail(_pc_module_io_in_T, 1) @[Core.scala 54:54]
        node _pc_module_io_in_T_2 = asSInt(_pc_module_io_in_T_1) @[Core.scala 54:54]
        pc_module.io.in <= _pc_module_io_in_T_2 @[Core.scala 54:25]
      else :
        node _T_8 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 55:42]
        node _T_9 = eq(_T_8, UInt<7>("h63")) @[Core.scala 55:49]
        node _T_10 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 55:96]
        node _T_11 = eq(_T_10, UInt<2>("h3")) @[Core.scala 55:103]
        node _T_12 = or(_T_9, _T_11) @[Core.scala 55:67]
        when _T_12 : @[Core.scala 55:121]
          node _pc_module_io_in_T_3 = sub(pc_module.io.pc4, asSInt(UInt<5>("h8"))) @[Core.scala 56:46]
          node _pc_module_io_in_T_4 = tail(_pc_module_io_in_T_3, 1) @[Core.scala 56:46]
          node _pc_module_io_in_T_5 = asSInt(_pc_module_io_in_T_4) @[Core.scala 56:46]
          pc_module.io.in <= _pc_module_io_in_T_5 @[Core.scala 56:25]
        else :
          pc_module.io.in <= pc_module.io.pc4 @[Core.scala 60:25]
    node _T_13 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 62:37]
    node _T_14 = eq(_T_13, UInt<7>("h6f")) @[Core.scala 62:44]
    node _T_15 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 62:90]
    node _T_16 = eq(_T_15, UInt<7>("h67")) @[Core.scala 62:97]
    node _T_17 = or(_T_14, _T_16) @[Core.scala 62:61]
    node _T_18 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 62:143]
    node _T_19 = eq(_T_18, UInt<7>("h63")) @[Core.scala 62:150]
    node _T_20 = or(_T_17, _T_19) @[Core.scala 62:114]
    node _T_21 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 62:196]
    node _T_22 = eq(_T_21, UInt<7>("h63")) @[Core.scala 62:203]
    node _T_23 = or(_T_20, _T_22) @[Core.scala 62:167]
    when _T_23 : @[Core.scala 62:223]
      InstructionFetch.io.stall <= UInt<1>("h1") @[Core.scala 63:24]
    else :
      node _T_24 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 64:43]
      node _T_25 = eq(_T_24, UInt<7>("h6f")) @[Core.scala 64:50]
      node _T_26 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 64:96]
      node _T_27 = eq(_T_26, UInt<7>("h67")) @[Core.scala 64:103]
      node _T_28 = or(_T_25, _T_27) @[Core.scala 64:67]
      node _T_29 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 64:149]
      node _T_30 = eq(_T_29, UInt<7>("h63")) @[Core.scala 64:156]
      node _T_31 = or(_T_28, _T_30) @[Core.scala 64:120]
      node _T_32 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 64:202]
      node _T_33 = eq(_T_32, UInt<7>("h63")) @[Core.scala 64:209]
      node _T_34 = or(_T_31, _T_33) @[Core.scala 64:173]
      node _T_35 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 64:257]
      node _T_36 = eq(_T_35, UInt<2>("h3")) @[Core.scala 64:264]
      node _T_37 = or(_T_34, _T_36) @[Core.scala 64:228]
      node _T_38 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 64:311]
      node _T_39 = eq(_T_38, UInt<2>("h3")) @[Core.scala 64:318]
      node _T_40 = or(_T_37, _T_39) @[Core.scala 64:282]
      when _T_40 : @[Core.scala 64:336]
        InstructionFetch.io.stall <= UInt<1>("h1") @[Core.scala 65:24]
      else :
        InstructionFetch.io.stall <= UInt<1>("h0") @[Core.scala 69:25]
    node _io_Address_T = bits(pc_module.io.pcout, 25, 2) @[Core.scala 72:37]
    io.Address <= _io_Address_T @[Core.scala 72:16]
    node _T_41 = bits(pc_module.io.pcout, 25, 2) @[Core.scala 73:44]
    InstructionFetch.io.address <= _T_41 @[Core.scala 73:23]
    io.Instruction <= InstructionFetch.io.instruction @[Core.scala 75:20]
    node _ifid_module_io_PCout_T = asUInt(pc_module.io.pcout) @[Core.scala 78:48]
    ifid_module.io.PCout <= _ifid_module_io_PCout_T @[Core.scala 78:26]
    node _ifid_module_io_PC4out_T = asUInt(pc_module.io.pc4) @[Core.scala 79:47]
    ifid_module.io.PC4out <= _ifid_module_io_PC4out_T @[Core.scala 79:27]
    ifid_module.io.Instr <= InstructionFetch.io.instruction @[Core.scala 80:26]
    node _T_42 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 81:36]
    node _T_43 = eq(_T_42, UInt<7>("h6f")) @[Core.scala 81:43]
    node _T_44 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 81:89]
    node _T_45 = eq(_T_44, UInt<7>("h67")) @[Core.scala 81:96]
    node _T_46 = or(_T_43, _T_45) @[Core.scala 81:60]
    node _T_47 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 81:142]
    node _T_48 = eq(_T_47, UInt<7>("h63")) @[Core.scala 81:149]
    node _T_49 = or(_T_46, _T_48) @[Core.scala 81:113]
    node _T_50 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 81:195]
    node _T_51 = eq(_T_50, UInt<7>("h63")) @[Core.scala 81:202]
    node _T_52 = or(_T_49, _T_51) @[Core.scala 81:166]
    node _T_53 = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 81:248]
    node _T_54 = eq(_T_53, UInt<2>("h3")) @[Core.scala 81:255]
    node _T_55 = or(_T_52, _T_54) @[Core.scala 81:220]
    node _T_56 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 81:302]
    node _T_57 = eq(_T_56, UInt<2>("h3")) @[Core.scala 81:309]
    node _T_58 = or(_T_55, _T_57) @[Core.scala 81:273]
    when _T_58 : @[Core.scala 81:327]
      ifid_module.io.flush <= UInt<1>("h1") @[Core.scala 82:29]
    else :
      ifid_module.io.flush <= UInt<1>("h0") @[Core.scala 84:28]
    node _ControlDecoder_module_io_opcode_T = bits(ifid_module.io.Instr_IFID, 6, 0) @[Core.scala 88:65]
    ControlDecoder_module.io.opcode <= _ControlDecoder_module_io_opcode_T @[Core.scala 88:37]
    immgen_module.io.pc <= ifid_module.io.PCout_IFID @[Core.scala 90:25]
    immgen_module.io.instruction <= ifid_module.io.Instr_IFID @[Core.scala 91:34]
    regfile_module.io.RegWrite <= ControlDecoder_module.io.RegWrite @[Core.scala 93:32]
    node _regfile_module_io_rs1_T = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 94:55]
    regfile_module.io.rs1 <= _regfile_module_io_rs1_T @[Core.scala 94:27]
    node _regfile_module_io_rs2_T = bits(ifid_module.io.Instr_IFID, 24, 20) @[Core.scala 95:55]
    regfile_module.io.rs2 <= _regfile_module_io_rs2_T @[Core.scala 95:27]
    regfile_module.io.instruction <= ifid_module.io.Instr_IFID @[Core.scala 96:35]
    idex_module.io.operandA <= UInt<1>("h0") @[Core.scala 99:32]
    idex_module.io.operandAsel <= UInt<1>("h0") @[Core.scala 100:32]
    node _T_59 = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 104:35]
    node _T_60 = neq(_T_59, UInt<1>("h0")) @[Core.scala 104:43]
    when _T_60 : @[Core.scala 104:52]
      node _T_61 = eq(memwb_module.io.RegWrite_MEMWB, UInt<1>("h1")) @[Core.scala 105:43]
      node _T_62 = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 106:66]
      node _T_63 = eq(memwb_module.io.RDD_MEMWB, _T_62) @[Core.scala 106:37]
      node _T_64 = and(_T_61, _T_63) @[Core.scala 105:54]
      node _T_65 = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 107:63]
      node _T_66 = neq(idex_module.io.RD_IDEX, _T_65) @[Core.scala 107:34]
      node _T_67 = and(_T_64, _T_66) @[Core.scala 106:74]
      node _T_68 = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 108:60]
      node _T_69 = neq(exmem_module.io.RDD, _T_68) @[Core.scala 108:31]
      node _T_70 = and(_T_67, _T_69) @[Core.scala 107:71]
      when _T_70 : @[Core.scala 109:7]
        idex_module.io.operandA <= memwb_module.io.ALUres_MEMWB @[Core.scala 110:33]
        idex_module.io.operandAsel <= UInt<1>("h1") @[Core.scala 111:36]
    else :
      idex_module.io.operandA <= UInt<1>("h0") @[Core.scala 114:31]
      idex_module.io.operandAsel <= UInt<1>("h0") @[Core.scala 115:34]
    BranchForward_module.io.IDEX_RD <= idex_module.io.RD_IDEX @[Core.scala 118:37]
    BranchForward_module.io.IDEX_MemRead <= idex_module.io.MemRead_IDEX @[Core.scala 119:42]
    BranchForward_module.io.EXMEM_RD <= exmem_module.io.RDD @[Core.scala 120:38]
    BranchForward_module.io.MEMWB_RD <= memwb_module.io.RDD_MEMWB @[Core.scala 121:38]
    BranchForward_module.io.EXMEM_MemRead <= exmem_module.io.MemReadS @[Core.scala 122:43]
    BranchForward_module.io.MEMWB_MemRead <= memwb_module.io.MemRead_MEMWB @[Core.scala 123:43]
    node _BranchForward_module_io_RS1_T = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 124:61]
    BranchForward_module.io.RS1 <= _BranchForward_module_io_RS1_T @[Core.scala 124:33]
    node _BranchForward_module_io_RS2_T = bits(ifid_module.io.Instr_IFID, 24, 20) @[Core.scala 125:61]
    BranchForward_module.io.RS2 <= _BranchForward_module_io_RS2_T @[Core.scala 125:33]
    BranchForward_module.io.Branch <= ControlDecoder_module.io.Branch @[Core.scala 126:36]
    node _Branchcontrol_module_io_RS1_T = asSInt(regfile_module.io.readData1) @[Core.scala 128:64]
    Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T @[Core.scala 128:33]
    node _Branchcontrol_module_io_RS2_T = asSInt(regfile_module.io.readData2) @[Core.scala 129:64]
    Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T @[Core.scala 129:33]
    node _Branchcontrol_module_io_func3_T = bits(ifid_module.io.Instr_IFID, 14, 12) @[Core.scala 130:63]
    Branchcontrol_module.io.func3 <= _Branchcontrol_module_io_func3_T @[Core.scala 130:35]
    node _T_71 = eq(BranchForward_module.io.RS1, UInt<1>("h0")) @[Core.scala 132:38]
    when _T_71 : @[Core.scala 132:53]
      node _Branchcontrol_module_io_RS1_T_1 = asSInt(regfile_module.io.readData1) @[Core.scala 133:66]
      Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_1 @[Core.scala 133:35]
      node _jalr_module_io_rs1_T = asSInt(regfile_module.io.readData1) @[Core.scala 134:57]
      jalr_module.io.rs1 <= _jalr_module_io_rs1_T @[Core.scala 134:26]
    else :
      node _T_72 = eq(BranchForward_module.io.RS1, UInt<1>("h1")) @[Core.scala 135:44]
      when _T_72 : @[Core.scala 135:59]
        node _Branchcontrol_module_io_RS1_T_2 = asSInt(alu_module.io.aluout) @[Core.scala 136:59]
        Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_2 @[Core.scala 136:35]
        node _jalr_module_io_rs1_T_1 = asSInt(regfile_module.io.readData1) @[Core.scala 137:56]
        jalr_module.io.rs1 <= _jalr_module_io_rs1_T_1 @[Core.scala 137:25]
      else :
        node _T_73 = eq(BranchForward_module.io.RS1, UInt<2>("h2")) @[Core.scala 138:44]
        when _T_73 : @[Core.scala 138:59]
          node _Branchcontrol_module_io_RS1_T_3 = asSInt(exmem_module.io.ALUresMEM) @[Core.scala 139:64]
          Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_3 @[Core.scala 139:35]
          node _jalr_module_io_rs1_T_2 = asSInt(regfile_module.io.readData1) @[Core.scala 140:57]
          jalr_module.io.rs1 <= _jalr_module_io_rs1_T_2 @[Core.scala 140:26]
        else :
          node _T_74 = eq(BranchForward_module.io.RS1, UInt<2>("h3")) @[Core.scala 141:44]
          when _T_74 : @[Core.scala 141:59]
            node _Branchcontrol_module_io_RS1_T_4 = asSInt(regfile_module.io.writeData) @[Core.scala 142:66]
            Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_4 @[Core.scala 142:35]
            node _jalr_module_io_rs1_T_3 = asSInt(regfile_module.io.readData1) @[Core.scala 143:57]
            jalr_module.io.rs1 <= _jalr_module_io_rs1_T_3 @[Core.scala 143:26]
          else :
            node _T_75 = eq(BranchForward_module.io.RS1, UInt<3>("h4")) @[Core.scala 144:44]
            when _T_75 : @[Core.scala 144:59]
              node _Branchcontrol_module_io_RS1_T_5 = asSInt(MEM.io.readData) @[Core.scala 145:54]
              Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_5 @[Core.scala 145:35]
              node _jalr_module_io_rs1_T_4 = asSInt(regfile_module.io.readData1) @[Core.scala 146:57]
              jalr_module.io.rs1 <= _jalr_module_io_rs1_T_4 @[Core.scala 146:26]
            else :
              node _T_76 = eq(BranchForward_module.io.RS1, UInt<3>("h5")) @[Core.scala 147:44]
              when _T_76 : @[Core.scala 147:59]
                node _Branchcontrol_module_io_RS1_T_6 = asSInt(regfile_module.io.writeData) @[Core.scala 148:65]
                Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_6 @[Core.scala 148:34]
                node _jalr_module_io_rs1_T_5 = asSInt(regfile_module.io.readData1) @[Core.scala 149:57]
                jalr_module.io.rs1 <= _jalr_module_io_rs1_T_5 @[Core.scala 149:26]
              else :
                node _T_77 = eq(BranchForward_module.io.RS1, UInt<3>("h6")) @[Core.scala 150:44]
                when _T_77 : @[Core.scala 150:59]
                  node _jalr_module_io_rs1_T_6 = asSInt(alu_module.io.aluout) @[Core.scala 151:52]
                  jalr_module.io.rs1 <= _jalr_module_io_rs1_T_6 @[Core.scala 151:28]
                  node _Branchcontrol_module_io_RS1_T_7 = asSInt(regfile_module.io.readData1) @[Core.scala 152:68]
                  Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_7 @[Core.scala 152:37]
                else :
                  node _T_78 = eq(BranchForward_module.io.RS1, UInt<3>("h7")) @[Core.scala 153:44]
                  when _T_78 : @[Core.scala 153:59]
                    node _jalr_module_io_rs1_T_7 = asSInt(exmem_module.io.ALUresMEM) @[Core.scala 154:57]
                    jalr_module.io.rs1 <= _jalr_module_io_rs1_T_7 @[Core.scala 154:28]
                    node _Branchcontrol_module_io_RS1_T_8 = asSInt(regfile_module.io.readData1) @[Core.scala 155:68]
                    Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_8 @[Core.scala 155:37]
                  else :
                    node _T_79 = eq(BranchForward_module.io.RS1, UInt<4>("h8")) @[Core.scala 156:44]
                    when _T_79 : @[Core.scala 156:59]
                      node _jalr_module_io_rs1_T_8 = asSInt(regfile_module.io.writeData) @[Core.scala 157:59]
                      jalr_module.io.rs1 <= _jalr_module_io_rs1_T_8 @[Core.scala 157:28]
                      node _Branchcontrol_module_io_RS1_T_9 = asSInt(regfile_module.io.readData1) @[Core.scala 158:67]
                      Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_9 @[Core.scala 158:36]
                    else :
                      node _T_80 = eq(BranchForward_module.io.RS1, UInt<4>("h9")) @[Core.scala 159:44]
                      when _T_80 : @[Core.scala 159:59]
                        node _jalr_module_io_rs1_T_9 = asSInt(MEM.io.readData) @[Core.scala 160:47]
                        jalr_module.io.rs1 <= _jalr_module_io_rs1_T_9 @[Core.scala 160:28]
                        node _Branchcontrol_module_io_RS1_T_10 = asSInt(regfile_module.io.readData1) @[Core.scala 161:68]
                        Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_10 @[Core.scala 161:37]
                      else :
                        node _T_81 = eq(BranchForward_module.io.RS1, UInt<4>("ha")) @[Core.scala 162:44]
                        when _T_81 : @[Core.scala 162:59]
                          node _jalr_module_io_rs1_T_10 = asSInt(regfile_module.io.writeData) @[Core.scala 163:59]
                          jalr_module.io.rs1 <= _jalr_module_io_rs1_T_10 @[Core.scala 163:28]
                          node _Branchcontrol_module_io_RS1_T_11 = asSInt(regfile_module.io.readData1) @[Core.scala 164:68]
                          Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_11 @[Core.scala 164:37]
                        else :
                          node _Branchcontrol_module_io_RS1_T_12 = asSInt(regfile_module.io.readData1) @[Core.scala 166:68]
                          Branchcontrol_module.io.RS1 <= _Branchcontrol_module_io_RS1_T_12 @[Core.scala 166:37]
                          node _jalr_module_io_rs1_T_11 = asSInt(regfile_module.io.readData1) @[Core.scala 167:59]
                          jalr_module.io.rs1 <= _jalr_module_io_rs1_T_11 @[Core.scala 167:28]
    node _T_82 = eq(BranchForward_module.io.RS2, UInt<1>("h0")) @[Core.scala 169:38]
    when _T_82 : @[Core.scala 169:52]
      node _Branchcontrol_module_io_RS2_T_1 = asSInt(regfile_module.io.readData2) @[Core.scala 170:69]
      Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_1 @[Core.scala 170:38]
    else :
      node _T_83 = eq(BranchForward_module.io.RS2, UInt<1>("h1")) @[Core.scala 171:44]
      when _T_83 : @[Core.scala 171:58]
        node _Branchcontrol_module_io_RS2_T_2 = asSInt(alu_module.io.aluout) @[Core.scala 172:62]
        Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_2 @[Core.scala 172:38]
      else :
        node _T_84 = eq(BranchForward_module.io.RS2, UInt<2>("h2")) @[Core.scala 173:44]
        when _T_84 : @[Core.scala 173:58]
          node _Branchcontrol_module_io_RS2_T_3 = asSInt(exmem_module.io.ALUresMEM) @[Core.scala 174:67]
          Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_3 @[Core.scala 174:38]
        else :
          node _T_85 = eq(BranchForward_module.io.RS2, UInt<2>("h3")) @[Core.scala 175:44]
          when _T_85 : @[Core.scala 175:58]
            node _Branchcontrol_module_io_RS2_T_4 = asSInt(regfile_module.io.writeData) @[Core.scala 176:69]
            Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_4 @[Core.scala 176:38]
          else :
            node _T_86 = eq(BranchForward_module.io.RS2, UInt<3>("h4")) @[Core.scala 177:44]
            when _T_86 : @[Core.scala 177:58]
              node _Branchcontrol_module_io_RS2_T_5 = asSInt(MEM.io.readData) @[Core.scala 178:56]
              Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_5 @[Core.scala 178:37]
            else :
              node _T_87 = eq(BranchForward_module.io.RS2, UInt<3>("h5")) @[Core.scala 179:44]
              when _T_87 : @[Core.scala 179:58]
                node _Branchcontrol_module_io_RS2_T_6 = asSInt(regfile_module.io.writeData) @[Core.scala 180:69]
                Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_6 @[Core.scala 180:38]
              else :
                node _Branchcontrol_module_io_RS2_T_7 = asSInt(regfile_module.io.readData2) @[Core.scala 182:69]
                Branchcontrol_module.io.RS2 <= _Branchcontrol_module_io_RS2_T_7 @[Core.scala 182:38]
    HazardDetect_module.io.IFID_Instruction <= ifid_module.io.Instr_IFID @[Core.scala 185:45]
    HazardDetect_module.io.IDEX_MemRead <= idex_module.io.MemRead_IDEX @[Core.scala 186:41]
    HazardDetect_module.io.IDEX_RD <= idex_module.io.RD_IDEX @[Core.scala 187:36]
    node _HazardDetect_module_io_PC_In_T = asSInt(ifid_module.io.PC4out_IFID) @[Core.scala 188:64]
    HazardDetect_module.io.PC_In <= _HazardDetect_module_io_PC_In_T @[Core.scala 188:34]
    node _HazardDetect_module_io_Current_PC_T = asSInt(ifid_module.io.PCout_IFID) @[Core.scala 189:68]
    HazardDetect_module.io.Current_PC <= _HazardDetect_module_io_Current_PC_T @[Core.scala 189:39]
    node _T_88 = eq(HazardDetect_module.io.Ctrl_forward, UInt<1>("h1")) @[Core.scala 227:46]
    when _T_88 : @[Core.scala 227:58]
      idex_module.io.MemWrite <= UInt<1>("h0") @[Core.scala 228:31]
      idex_module.io.MemRead <= UInt<1>("h0") @[Core.scala 229:30]
      idex_module.io.Branch <= UInt<1>("h0") @[Core.scala 230:29]
      idex_module.io.RegWrite <= UInt<1>("h0") @[Core.scala 231:31]
      idex_module.io.MemtoReg <= UInt<1>("h0") @[Core.scala 232:30]
      idex_module.io.ALUOp <= UInt<1>("h0") @[Core.scala 233:28]
      idex_module.io.OpA_s <= UInt<1>("h0") @[Core.scala 234:29]
      idex_module.io.OpB_s <= UInt<1>("h0") @[Core.scala 235:29]
      idex_module.io.Nextpc <= UInt<1>("h0") @[Core.scala 236:29]
    else :
      idex_module.io.MemWrite <= ControlDecoder_module.io.MemWrite @[Core.scala 238:31]
      idex_module.io.MemRead <= ControlDecoder_module.io.MemRead @[Core.scala 239:30]
      idex_module.io.Branch <= ControlDecoder_module.io.Branch @[Core.scala 240:28]
      idex_module.io.RegWrite <= ControlDecoder_module.io.RegWrite @[Core.scala 241:32]
      idex_module.io.MemtoReg <= ControlDecoder_module.io.Mem2Reg @[Core.scala 242:31]
      idex_module.io.ALUOp <= ControlDecoder_module.io.Aluop @[Core.scala 243:28]
      idex_module.io.OpA_s <= ControlDecoder_module.io.opA @[Core.scala 244:28]
      idex_module.io.OpB_s <= ControlDecoder_module.io.opB @[Core.scala 245:28]
      idex_module.io.Nextpc <= ControlDecoder_module.io.nextPC @[Core.scala 246:29]
    idex_module.io.PC <= ifid_module.io.PCout_IFID @[Core.scala 249:23]
    idex_module.io.PC4 <= ifid_module.io.PC4out_IFID @[Core.scala 250:24]
    idex_module.io.MemWrite <= ControlDecoder_module.io.MemWrite @[Core.scala 251:28]
    idex_module.io.Branch <= ControlDecoder_module.io.Branch @[Core.scala 252:27]
    idex_module.io.MemRead <= ControlDecoder_module.io.MemRead @[Core.scala 253:28]
    idex_module.io.RegWrite <= ControlDecoder_module.io.RegWrite @[Core.scala 254:29]
    idex_module.io.MemtoReg <= ControlDecoder_module.io.Mem2Reg @[Core.scala 255:29]
    idex_module.io.ALUOp <= ControlDecoder_module.io.Aluop @[Core.scala 256:26]
    idex_module.io.OpA_s <= ControlDecoder_module.io.opA @[Core.scala 257:26]
    idex_module.io.OpB_s <= ControlDecoder_module.io.opB @[Core.scala 258:26]
    idex_module.io.Nextpc <= ControlDecoder_module.io.nextPC @[Core.scala 259:27]
    node _idex_module_io_func3_T = bits(ifid_module.io.Instr_IFID, 14, 12) @[Core.scala 260:54]
    idex_module.io.func3 <= _idex_module_io_func3_T @[Core.scala 260:26]
    node _idex_module_io_func7_T = bits(ifid_module.io.Instr_IFID, 30, 30) @[Core.scala 261:54]
    idex_module.io.func7 <= _idex_module_io_func7_T @[Core.scala 261:26]
    idex_module.io.Read1 <= regfile_module.io.readData1 @[Core.scala 262:26]
    idex_module.io.Read2 <= regfile_module.io.readData2 @[Core.scala 263:26]
    node _idex_module_io_RS1_S_T = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 264:54]
    idex_module.io.RS1_S <= _idex_module_io_RS1_S_T @[Core.scala 264:26]
    node _idex_module_io_RS2_S_T = bits(ifid_module.io.Instr_IFID, 24, 20) @[Core.scala 265:54]
    idex_module.io.RS2_S <= _idex_module_io_RS2_S_T @[Core.scala 265:26]
    node _idex_module_io_RD_T = bits(ifid_module.io.Instr_IFID, 11, 7) @[Core.scala 266:51]
    idex_module.io.RD <= _idex_module_io_RD_T @[Core.scala 266:23]
    idex_module.io.Instr <= ifid_module.io.Instr_IFID @[Core.scala 267:26]
    alucontrol_module.io.Aluop <= idex_module.io.ALUOp_IDEX @[Core.scala 270:32]
    alucontrol_module.io.func7 <= idex_module.io.func7_IDEX @[Core.scala 271:32]
    alucontrol_module.io.func3 <= idex_module.io.func3_IDEX @[Core.scala 272:32]
    node _Forward_module_io_RS1_T = bits(ifid_module.io.Instr_IFID, 19, 15) @[Core.scala 274:55]
    Forward_module.io.RS1 <= _Forward_module_io_RS1_T @[Core.scala 274:27]
    node _Forward_module_io_RS2_T = bits(ifid_module.io.Instr_IFID, 24, 20) @[Core.scala 275:55]
    Forward_module.io.RS2 <= _Forward_module_io_RS2_T @[Core.scala 275:27]
    Forward_module.io.MEMWB_RegWrite <= memwb_module.io.RegWrite_MEMWB @[Core.scala 276:38]
    Forward_module.io.MEMWB_RD <= memwb_module.io.RDD_MEMWB @[Core.scala 277:32]
    node _T_89 = eq(Forward_module.io.RS1OUT, UInt<1>("h1")) @[Core.scala 279:35]
    when _T_89 : @[Core.scala 279:44]
      idex_module.io.Read1 <= regfile_module.io.writeData @[Core.scala 280:30]
    else :
      idex_module.io.Read1 <= regfile_module.io.readData1 @[Core.scala 282:30]
    node _T_90 = eq(Forward_module.io.RS2OUT, UInt<1>("h1")) @[Core.scala 285:37]
    when _T_90 : @[Core.scala 285:46]
      idex_module.io.Read2 <= regfile_module.io.writeData @[Core.scala 286:30]
    else :
      idex_module.io.Read2 <= regfile_module.io.readData2 @[Core.scala 288:30]
    node _jalr_module_io_rs1_T_12 = asSInt(regfile_module.io.readData1) @[Core.scala 292:55]
    jalr_module.io.rs1 <= _jalr_module_io_rs1_T_12 @[Core.scala 292:24]
    jalr_module.io.imme <= immgen_module.io.imm_out @[Core.scala 293:25]
    node _T_91 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 295:31]
    node _T_92 = eq(_T_91, UInt<5>("h17")) @[Core.scala 295:38]
    when _T_92 : @[Core.scala 295:55]
      alu_module.io.op1 <= UInt<1>("h0") @[Core.scala 296:23]
    else :
      node _T_93 = eq(idex_module.io.operandAselout, UInt<1>("h1")) @[Core.scala 298:40]
      when _T_93 : @[Core.scala 298:52]
        alu_module.io.op1 <= idex_module.io.operandAout @[Core.scala 299:26]
      else :
        node _T_94 = bits(idex_module.io.Instr_IDEX, 19, 15) @[Core.scala 301:37]
        node _T_95 = eq(_T_94, UInt<1>("h0")) @[Core.scala 301:46]
        when _T_95 : @[Core.scala 301:57]
          alu_module.io.op1 <= UInt<1>("h0") @[Core.scala 302:27]
        else :
          node _T_96 = bits(idex_module.io.Instr_IDEX, 6, 0) @[Core.scala 304:39]
          node _T_97 = eq(_T_96, UInt<6>("h37")) @[Core.scala 304:46]
          when _T_97 : @[Core.scala 304:63]
            alu_module.io.op1 <= UInt<1>("h0") @[Core.scala 305:29]
          else :
            node _T_98 = eq(idex_module.io.OpA_s_IDEX, UInt<2>("h2")) @[Core.scala 307:43]
            when _T_98 : @[Core.scala 307:56]
              alu_module.io.op1 <= idex_module.io.PC_IDEX @[Core.scala 308:33]
            else :
              node _T_99 = eq(ForwardingUnit_module.io.ForwardA, UInt<1>("h0")) @[Core.scala 310:52]
              when _T_99 : @[Core.scala 310:65]
                alu_module.io.op1 <= idex_module.io.Read1_IDEX @[Core.scala 311:34]
              else :
                node _T_100 = eq(ForwardingUnit_module.io.ForwardA, UInt<1>("h1")) @[Core.scala 312:58]
                when _T_100 : @[Core.scala 312:71]
                  alu_module.io.op1 <= exmem_module.io.ALUresMEM @[Core.scala 313:34]
                else :
                  node _T_101 = eq(ForwardingUnit_module.io.ForwardA, UInt<2>("h2")) @[Core.scala 314:58]
                  when _T_101 : @[Core.scala 314:71]
                    alu_module.io.op1 <= regfile_module.io.writeData @[Core.scala 315:33]
                  else :
                    alu_module.io.op1 <= idex_module.io.Read1_IDEX @[Core.scala 317:33]
    node _T_102 = eq(ControlDecoder_module.io.Ex_sel, UInt<1>("h0")) @[Core.scala 328:42]
    when _T_102 : @[Core.scala 328:54]
      node _idex_module_io_Immd_T = asUInt(immgen_module.io.imm_out) @[Core.scala 329:57]
      idex_module.io.Immd <= _idex_module_io_Immd_T @[Core.scala 329:29]
    else :
      node _T_103 = eq(ControlDecoder_module.io.Ex_sel, UInt<1>("h1")) @[Core.scala 330:48]
      when _T_103 : @[Core.scala 330:60]
        node _idex_module_io_Immd_T_1 = asUInt(immgen_module.io.imm_out) @[Core.scala 331:57]
        idex_module.io.Immd <= _idex_module_io_Immd_T_1 @[Core.scala 331:29]
      else :
        node _T_104 = eq(ControlDecoder_module.io.Ex_sel, UInt<2>("h2")) @[Core.scala 332:48]
        when _T_104 : @[Core.scala 332:60]
          node _idex_module_io_Immd_T_2 = asUInt(immgen_module.io.imm_out) @[Core.scala 333:57]
          idex_module.io.Immd <= _idex_module_io_Immd_T_2 @[Core.scala 333:29]
        else :
          idex_module.io.Immd <= UInt<1>("h0") @[Core.scala 335:27]
    alu_module.io.op2 <= UInt<1>("h0") @[Core.scala 338:23]
    node _T_105 = eq(idex_module.io.OpB_s_IDEX, UInt<1>("h1")) @[Core.scala 340:36]
    when _T_105 : @[Core.scala 340:44]
      alu_module.io.op2 <= idex_module.io.Immd_IDEX @[Core.scala 341:27]
      node _T_106 = eq(ForwardingUnit_module.io.ForwardB, UInt<1>("h0")) @[Core.scala 342:47]
      when _T_106 : @[Core.scala 342:59]
        exmem_module.io.ReadData2 <= idex_module.io.Read2_IDEX @[Core.scala 343:35]
      else :
        node _T_107 = eq(ForwardingUnit_module.io.ForwardB, UInt<1>("h1")) @[Core.scala 344:54]
        node _T_108 = and(_T_107, exmem_module.io.MemtoRegS) @[Core.scala 344:67]
        when _T_108 : @[Core.scala 344:96]
          exmem_module.io.ReadData2 <= MEM.io.readData @[Core.scala 345:35]
        else :
          node _T_109 = eq(ForwardingUnit_module.io.ForwardB, UInt<1>("h1")) @[Core.scala 346:54]
          when _T_109 : @[Core.scala 346:67]
            exmem_module.io.ReadData2 <= exmem_module.io.ALUresMEM @[Core.scala 347:35]
          else :
            node _T_110 = eq(ForwardingUnit_module.io.ForwardB, UInt<2>("h2")) @[Core.scala 348:53]
            when _T_110 : @[Core.scala 348:65]
              exmem_module.io.ReadData2 <= regfile_module.io.writeData @[Core.scala 349:35]
            else :
              exmem_module.io.ReadData2 <= idex_module.io.Read2_IDEX @[Core.scala 351:35]
    else :
      node _T_111 = eq(ForwardingUnit_module.io.ForwardB, UInt<1>("h0")) @[Core.scala 354:46]
      when _T_111 : @[Core.scala 354:59]
        alu_module.io.op2 <= idex_module.io.Read2_IDEX @[Core.scala 355:27]
        exmem_module.io.ReadData2 <= idex_module.io.Read2_IDEX @[Core.scala 356:34]
      else :
        node _T_112 = eq(ForwardingUnit_module.io.ForwardB, UInt<1>("h1")) @[Core.scala 357:52]
        when _T_112 : @[Core.scala 357:65]
          alu_module.io.op2 <= exmem_module.io.ALUresMEM @[Core.scala 358:27]
          exmem_module.io.ReadData2 <= exmem_module.io.ALUresMEM @[Core.scala 359:35]
        else :
          node _T_113 = eq(ForwardingUnit_module.io.ForwardB, UInt<2>("h2")) @[Core.scala 360:52]
          when _T_113 : @[Core.scala 360:65]
            alu_module.io.op2 <= regfile_module.io.writeData @[Core.scala 361:27]
            exmem_module.io.ReadData2 <= regfile_module.io.writeData @[Core.scala 362:35]
          else :
            alu_module.io.op2 <= idex_module.io.Read2_IDEX @[Core.scala 364:26]
            exmem_module.io.ReadData2 <= idex_module.io.Read2_IDEX @[Core.scala 365:35]
    alu_module.io.aluctrl <= alucontrol_module.io.aluctrl @[Core.scala 368:27]
    exmem_module.io.MemWrite <= idex_module.io.MemWrite_IDEX @[Core.scala 372:30]
    exmem_module.io.MemRead <= idex_module.io.MemRead_IDEX @[Core.scala 373:29]
    exmem_module.io.Instr <= idex_module.io.Instr_IDEX @[Core.scala 374:27]
    exmem_module.io.func3 <= idex_module.io.func3_IDEX @[Core.scala 375:27]
    exmem_module.io.RegWrite <= idex_module.io.RegWrite_IDEX @[Core.scala 376:30]
    exmem_module.io.MemtoReg <= idex_module.io.MemtoReg_IDEX @[Core.scala 377:30]
    exmem_module.io.ALUres <= alu_module.io.aluout @[Core.scala 379:28]
    exmem_module.io.RD <= idex_module.io.RD_IDEX @[Core.scala 380:24]
    exmem_module.io.PC4 <= idex_module.io.PC4_IDEX @[Core.scala 381:25]
    exmem_module.io.PC <= idex_module.io.PC_IDEX @[Core.scala 382:24]
    ForwardingUnit_module.io.EXMEM_RD <= exmem_module.io.RDD @[Core.scala 386:39]
    ForwardingUnit_module.io.IDEX_RS1 <= idex_module.io.RS1_S_IDEX @[Core.scala 387:39]
    ForwardingUnit_module.io.IDEX_RS2 <= idex_module.io.RS2_S_IDEX @[Core.scala 388:39]
    ForwardingUnit_module.io.MEMWB_RD <= memwb_module.io.RDD_MEMWB @[Core.scala 390:39]
    ForwardingUnit_module.io.MEMWB_RegWrite <= memwb_module.io.RegWrite_MEMWB @[Core.scala 391:45]
    ForwardingUnit_module.io.EXMEM_RegWrite <= exmem_module.io.RegWriteS @[Core.scala 392:45]
    io.dmemReq.bits <= MEM.io.dccmReq.bits @[Core.scala 395:16]
    io.dmemReq.valid <= MEM.io.dccmReq.valid @[Core.scala 395:16]
    MEM.io.dccmReq.ready <= io.dmemReq.ready @[Core.scala 395:16]
    MEM.io.dccmRsp <= io.dmemRsp @[Core.scala 396:20]
    node _T_114 = or(exmem_module.io.MemReadS, exmem_module.io.MemWriteS) @[Core.scala 397:35]
    when _T_114 : @[Core.scala 397:65]
      MEM.io.aluResultIn <= exmem_module.io.ALUresMEM @[Core.scala 398:26]
    else :
      MEM.io.aluResultIn <= UInt<1>("h0") @[Core.scala 400:26]
    MEM.io.writeData <= exmem_module.io.ReadData2MEM @[Core.scala 402:22]
    MEM.io.readEnable <= exmem_module.io.MemReadS @[Core.scala 403:23]
    MEM.io.writeEnable <= exmem_module.io.MemWriteS @[Core.scala 404:24]
    MEM.io.f3 <= exmem_module.io.func3_EXMEM @[Core.scala 405:15]
    memwb_module.io.RegWrite <= exmem_module.io.RegWriteS @[Core.scala 410:30]
    memwb_module.io.MemtoReg <= exmem_module.io.MemtoRegS @[Core.scala 411:30]
    memwb_module.io.MemRead <= exmem_module.io.MemReadS @[Core.scala 412:29]
    memwb_module.io.MemWrite <= exmem_module.io.MemWriteS @[Core.scala 413:30]
    memwb_module.io.ReadData <= MEM.io.readData @[Core.scala 414:30]
    node _T_115 = bits(exmem_module.io.Instr_EXMEM, 6, 0) @[Core.scala 415:38]
    node _T_116 = eq(_T_115, UInt<7>("h6f")) @[Core.scala 415:45]
    node _T_117 = bits(exmem_module.io.Instr_EXMEM, 6, 0) @[Core.scala 415:93]
    node _T_118 = eq(_T_117, UInt<7>("h67")) @[Core.scala 415:100]
    node _T_119 = or(_T_116, _T_118) @[Core.scala 415:62]
    when _T_119 : @[Core.scala 415:118]
      memwb_module.io.ALUres <= exmem_module.io.PC4_EXMEM @[Core.scala 416:31]
    else :
      memwb_module.io.ALUres <= exmem_module.io.ALUresMEM @[Core.scala 418:30]
    memwb_module.io.ALUres <= exmem_module.io.ALUresMEM @[Core.scala 420:28]
    memwb_module.io.RD <= exmem_module.io.RDD @[Core.scala 421:24]
    memwb_module.io.Instr <= exmem_module.io.Instr_EXMEM @[Core.scala 422:27]
    memwb_module.io.memaddress <= exmem_module.io.ALUresMEM @[Core.scala 423:32]
    memwb_module.io.memdata <= MEM.io.readData @[Core.scala 424:29]
    node _regfile_module_io_writeData_T = eq(memwb_module.io.MemtoReg_MEMWB, UInt<1>("h0")) @[Core.scala 426:39]
    node _regfile_module_io_writeData_T_1 = eq(memwb_module.io.MemtoReg_MEMWB, UInt<1>("h1")) @[Core.scala 427:39]
    node _regfile_module_io_writeData_T_2 = mux(_regfile_module_io_writeData_T_1, MEM.io.Data, UInt<1>("h0")) @[Mux.scala 101:16]
    node _regfile_module_io_writeData_T_3 = mux(_regfile_module_io_writeData_T, memwb_module.io.ALUres_MEMWB, _regfile_module_io_writeData_T_2) @[Mux.scala 101:16]
    regfile_module.io.writeData <= _regfile_module_io_writeData_T_3 @[Core.scala 425:33]
    regfile_module.io.RegWrite <= memwb_module.io.RegWrite_MEMWB @[Core.scala 429:32]
    regfile_module.io.rd <= memwb_module.io.RDD_MEMWB @[Core.scala 430:26]
    memwb_module.io.mask <= MEM.io.maskout @[Core.scala 431:26]
    io.output <= memwb_module.io.memdataD @[Core.scala 432:15]
    memwb_module.io.MemWritedata <= exmem_module.io.ReadData2MEM @[Core.scala 433:34]
    memwb_module.io.PC <= exmem_module.io.PC_EXMEM @[Core.scala 434:24]
    node _T_120 = bits(memwb_module.io.Instr_MEMWB, 6, 0) @[Core.scala 436:38]
    node _T_121 = eq(_T_120, UInt<2>("h3")) @[Core.scala 436:45]
    when _T_121 : @[Core.scala 436:63]
      regfile_module.io.rd <= memwb_module.io.RDD_MEMWB @[Core.scala 437:28]
      regfile_module.io.writeData <= MEM.io.Data @[Core.scala 438:35]
      regfile_module.io.RegWrite <= UInt<1>("h1") @[Core.scala 439:34]
    node _io_rvfi_bool_T = neq(memwb_module.io.Instr_MEMWB, UInt<1>("h0")) @[Core.scala 443:56]
    node _io_rvfi_bool_T_1 = asUInt(clock) @[Core.scala 443:75]
    node _io_rvfi_bool_T_2 = bits(_io_rvfi_bool_T_1, 0, 0) @[Core.scala 443:75]
    node _io_rvfi_bool_T_3 = eq(_io_rvfi_bool_T_2, UInt<1>("h0")) @[Core.scala 443:68]
    node _io_rvfi_bool_T_4 = and(_io_rvfi_bool_T, _io_rvfi_bool_T_3) @[Core.scala 443:65]
    io.rvfi.bool <= _io_rvfi_bool_T_4 @[Core.scala 443:24]
    io.rvfi.uint2 <= UInt<2>("h3") @[Core.scala 444:25]
    io.rvfi.uint4 <= memwb_module.io.mask_out @[Core.scala 445:25]
    io.rvfi.uint5[0] <= UInt<1>("h0") @[Core.scala 448:38]
    io.rvfi.uint5[1] <= UInt<1>("h0") @[Core.scala 448:38]
    io.rvfi.uint5[2] <= UInt<1>("h0") @[Core.scala 448:38]
    io.rvfi.uint32[0] <= memwb_module.io.Instr_MEMWB @[Core.scala 464:39]
    io.rvfi.uint32[1] <= UInt<1>("h0") @[Core.scala 464:39]
    io.rvfi.uint32[2] <= UInt<1>("h0") @[Core.scala 464:39]
    io.rvfi.uint32[3] <= UInt<1>("h0") @[Core.scala 464:39]
    io.rvfi.uint32[4] <= memwb_module.io.PC_MEMWB @[Core.scala 464:39]
    io.rvfi.uint32[5] <= UInt<1>("h0") @[Core.scala 464:39]
    io.rvfi.uint32[6] <= memwb_module.io.memaddressD @[Core.scala 464:39]
    io.rvfi.uint32[7] <= UInt<1>("h0") @[Core.scala 464:39]
    io.rvfi.uint32[8] <= memwb_module.io.MemWritedata_out @[Core.scala 464:39]

  extmodule sram_top :
    input clk : UInt<1>
    input reset : UInt<1>
    input we : UInt<1>
    input addr : UInt<28>
    input data_i : UInt<32>
    input wmask : UInt<4>
    output data_o : UInt<32>
    defname = sram_top
    parameter IFILE = "dmem.hex"

  module SRamTop :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    reg state_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[SRamTop.scala 14:38]
    node _state_reg_T = eq(state_reg, UInt<1>("h0")) @[SRamTop.scala 16:18]
    node _state_reg_T_1 = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 16:42]
    node _state_reg_T_2 = and(_state_reg_T_1, io.rsp.ready) @[SRamTop.scala 16:51]
    node _state_reg_T_3 = or(_state_reg_T, _state_reg_T_2) @[SRamTop.scala 16:27]
    node _state_reg_T_4 = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 17:18]
    node _state_reg_T_5 = and(_state_reg_T_4, io.req.valid) @[SRamTop.scala 17:27]
    node _state_reg_T_6 = mux(_state_reg_T_5, UInt<2>("h2"), state_reg) @[Mux.scala 101:16]
    node _state_reg_T_7 = mux(_state_reg_T_3, UInt<1>("h1"), _state_reg_T_6) @[Mux.scala 101:16]
    state_reg <= _state_reg_T_7 @[SRamTop.scala 15:15]
    node _io_rsp_valid_T = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 21:31]
    io.rsp.valid <= _io_rsp_valid_T @[SRamTop.scala 21:18]
    node _io_req_ready_T = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 22:31]
    io.req.ready <= _io_req_ready_T @[SRamTop.scala 22:18]
    wire rdata : UInt<32> @[SRamTop.scala 24:21]
    inst sram of sram_top @[SRamTop.scala 27:22]
    node _clk_T = asUInt(clock) @[SRamTop.scala 29:30]
    wire clk : UInt @[SRamTop.scala 29:23]
    clk <= _clk_T @[SRamTop.scala 29:23]
    wire rst : UInt<1> @[SRamTop.scala 30:19]
    node _rst_T = asUInt(reset) @[SRamTop.scala 31:18]
    rst <= _rst_T @[SRamTop.scala 31:9]
    sram.clk <= clk @[SRamTop.scala 33:17]
    sram.reset <= rst @[SRamTop.scala 34:19]
    sram.we <= UInt<1>("h0") @[SRamTop.scala 35:16]
    sram.wmask <= UInt<1>("h0") @[SRamTop.scala 36:19]
    sram.addr <= UInt<1>("h0") @[SRamTop.scala 37:18]
    sram.data_i <= UInt<1>("h0") @[SRamTop.scala 38:20]
    node _T = eq(io.req.bits.isWrite, UInt<1>("h0")) @[SRamTop.scala 45:30]
    node _T_1 = and(io.req.valid, _T) @[SRamTop.scala 45:27]
    when _T_1 : @[SRamTop.scala 45:52]
      sram.we <= UInt<1>("h0") @[SRamTop.scala 47:24]
      sram.addr <= io.req.bits.addrRequest @[SRamTop.scala 48:26]
      rdata <= sram.data_o @[SRamTop.scala 49:19]
    else :
      node _T_2 = and(io.req.valid, io.req.bits.isWrite) @[SRamTop.scala 50:33]
      when _T_2 : @[SRamTop.scala 50:57]
        sram.we <= UInt<1>("h1") @[SRamTop.scala 52:24]
        sram.wmask <= io.req.bits.activeByteLane @[SRamTop.scala 53:27]
        sram.addr <= io.req.bits.addrRequest @[SRamTop.scala 54:26]
        sram.data_i <= io.req.bits.dataRequest @[SRamTop.scala 55:28]
        rdata <= UInt<1>("h0") @[SRamTop.scala 56:19]
      else :
        rdata <= UInt<1>("h0") @[SRamTop.scala 58:19]
    io.rsp.bits.dataResponse <= sram.data_o @[SRamTop.scala 60:30]

  extmodule sram_top_1 :
    input clk : UInt<1>
    input reset : UInt<1>
    input we : UInt<1>
    input addr : UInt<28>
    input data_i : UInt<32>
    input wmask : UInt<4>
    output data_o : UInt<32>
    defname = sram_top
    parameter IFILE = "program.hex"

  module SRamTop_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip req : { flip ready : UInt<1>, valid : UInt<1>, bits : { addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : { flip ready : UInt<1>, valid : UInt<1>, bits : { dataResponse : UInt<32>}}}

    reg state_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[SRamTop.scala 14:38]
    node _state_reg_T = eq(state_reg, UInt<1>("h0")) @[SRamTop.scala 16:18]
    node _state_reg_T_1 = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 16:42]
    node _state_reg_T_2 = and(_state_reg_T_1, io.rsp.ready) @[SRamTop.scala 16:51]
    node _state_reg_T_3 = or(_state_reg_T, _state_reg_T_2) @[SRamTop.scala 16:27]
    node _state_reg_T_4 = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 17:18]
    node _state_reg_T_5 = and(_state_reg_T_4, io.req.valid) @[SRamTop.scala 17:27]
    node _state_reg_T_6 = mux(_state_reg_T_5, UInt<2>("h2"), state_reg) @[Mux.scala 101:16]
    node _state_reg_T_7 = mux(_state_reg_T_3, UInt<1>("h1"), _state_reg_T_6) @[Mux.scala 101:16]
    state_reg <= _state_reg_T_7 @[SRamTop.scala 15:15]
    node _io_rsp_valid_T = eq(state_reg, UInt<2>("h2")) @[SRamTop.scala 21:31]
    io.rsp.valid <= _io_rsp_valid_T @[SRamTop.scala 21:18]
    node _io_req_ready_T = eq(state_reg, UInt<1>("h1")) @[SRamTop.scala 22:31]
    io.req.ready <= _io_req_ready_T @[SRamTop.scala 22:18]
    wire rdata : UInt<32> @[SRamTop.scala 24:21]
    inst sram of sram_top_1 @[SRamTop.scala 27:22]
    node _clk_T = asUInt(clock) @[SRamTop.scala 29:30]
    wire clk : UInt @[SRamTop.scala 29:23]
    clk <= _clk_T @[SRamTop.scala 29:23]
    wire rst : UInt<1> @[SRamTop.scala 30:19]
    node _rst_T = asUInt(reset) @[SRamTop.scala 31:18]
    rst <= _rst_T @[SRamTop.scala 31:9]
    sram.clk <= clk @[SRamTop.scala 33:17]
    sram.reset <= rst @[SRamTop.scala 34:19]
    sram.we <= UInt<1>("h0") @[SRamTop.scala 35:16]
    sram.wmask <= UInt<1>("h0") @[SRamTop.scala 36:19]
    sram.addr <= UInt<1>("h0") @[SRamTop.scala 37:18]
    sram.data_i <= UInt<1>("h0") @[SRamTop.scala 38:20]
    node _T = eq(io.req.bits.isWrite, UInt<1>("h0")) @[SRamTop.scala 45:30]
    node _T_1 = and(io.req.valid, _T) @[SRamTop.scala 45:27]
    when _T_1 : @[SRamTop.scala 45:52]
      sram.we <= UInt<1>("h0") @[SRamTop.scala 47:24]
      sram.addr <= io.req.bits.addrRequest @[SRamTop.scala 48:26]
      rdata <= sram.data_o @[SRamTop.scala 49:19]
    else :
      node _T_2 = and(io.req.valid, io.req.bits.isWrite) @[SRamTop.scala 50:33]
      when _T_2 : @[SRamTop.scala 50:57]
        sram.we <= UInt<1>("h1") @[SRamTop.scala 52:24]
        sram.wmask <= io.req.bits.activeByteLane @[SRamTop.scala 53:27]
        sram.addr <= io.req.bits.addrRequest @[SRamTop.scala 54:26]
        sram.data_i <= io.req.bits.dataRequest @[SRamTop.scala 55:28]
        rdata <= UInt<1>("h0") @[SRamTop.scala 56:19]
      else :
        rdata <= UInt<1>("h0") @[SRamTop.scala 58:19]
    io.rsp.bits.dataResponse <= sram.data_o @[SRamTop.scala 60:30]

  module Tracer :
    output rvfi_i : { flip bool : UInt<1>, flip uint2 : UInt<2>, flip uint4 : UInt<4>, flip uint5 : UInt<5>[3], flip uint32 : UInt<32>[9]}
    output rvfi_o : { valid : UInt<1>[1], insn : UInt<32>[1], mode : UInt<2>[1], rs1_addr : UInt<5>[1], rs2_addr : UInt<5>[1], rs1_rdata : UInt<32>[1], rs2_rdata : UInt<32>[1], rd_addr : UInt<5>[1], rd_wdata : UInt<32>[1], pc_rdata : UInt<32>[1], pc_wdata : UInt<32>[1], mem_addr : UInt<32>[1], mem_wmask : UInt<4>[1], mem_rdata : UInt<32>[1], mem_wdata : UInt<32>[1]}

    rvfi_o.valid[0] <= rvfi_i.bool @[Tracer.scala 55:19]
    rvfi_o.mode[0] <= rvfi_i.uint2 @[Tracer.scala 56:18]
    rvfi_o.mem_wmask[0] <= rvfi_i.uint4 @[Tracer.scala 57:23]
    rvfi_o.rs1_addr[0] <= rvfi_i.uint5[0] @[Tracer.scala 64:18]
    rvfi_o.rs2_addr[0] <= rvfi_i.uint5[1] @[Tracer.scala 64:18]
    rvfi_o.rd_addr[0] <= rvfi_i.uint5[2] @[Tracer.scala 64:18]
    rvfi_o.insn[0] <= rvfi_i.uint32[0] @[Tracer.scala 78:18]
    rvfi_o.rs1_rdata[0] <= rvfi_i.uint32[1] @[Tracer.scala 78:18]
    rvfi_o.rs2_rdata[0] <= rvfi_i.uint32[2] @[Tracer.scala 78:18]
    rvfi_o.rd_wdata[0] <= rvfi_i.uint32[3] @[Tracer.scala 78:18]
    rvfi_o.pc_rdata[0] <= rvfi_i.uint32[4] @[Tracer.scala 78:18]
    rvfi_o.pc_wdata[0] <= rvfi_i.uint32[5] @[Tracer.scala 78:18]
    rvfi_o.mem_addr[0] <= rvfi_i.uint32[6] @[Tracer.scala 78:18]
    rvfi_o.mem_rdata[0] <= rvfi_i.uint32[7] @[Tracer.scala 78:18]
    rvfi_o.mem_wdata[0] <= rvfi_i.uint32[8] @[Tracer.scala 78:18]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { rvfi : { valid : UInt<1>[1], insn : UInt<32>[1], mode : UInt<2>[1], rs1_addr : UInt<5>[1], rs2_addr : UInt<5>[1], rs1_rdata : UInt<32>[1], rs2_rdata : UInt<32>[1], rd_addr : UInt<5>[1], rd_wdata : UInt<32>[1], pc_rdata : UInt<32>[1], pc_wdata : UInt<32>[1], mem_addr : UInt<32>[1], mem_wmask : UInt<4>[1], mem_rdata : UInt<32>[1], mem_wdata : UInt<32>[1]}}

    inst Core of Core @[Top.scala 16:26]
    Core.clock <= clock
    Core.reset <= reset
    inst dmem of SRamTop @[Top.scala 17:20]
    dmem.clock <= clock
    dmem.reset <= reset
    inst imem of SRamTop_1 @[Top.scala 18:20]
    imem.clock <= clock
    imem.reset <= reset
    Core.io.imemRsp <= imem.io.rsp @[Top.scala 21:19]
    imem.io.req <= Core.io.imemReq @[Top.scala 22:15]
    Core.io.dmemRsp <= dmem.io.rsp @[Top.scala 25:19]
    dmem.io.req <= Core.io.dmemReq @[Top.scala 26:15]
    inst tracer of Tracer @[Top.scala 29:24]
    tracer.rvfi_i.uint32 <= Core.io.rvfi.uint32 @[Top.scala 30:19]
    tracer.rvfi_i.uint5 <= Core.io.rvfi.uint5 @[Top.scala 30:19]
    tracer.rvfi_i.uint4 <= Core.io.rvfi.uint4 @[Top.scala 30:19]
    tracer.rvfi_i.uint2 <= Core.io.rvfi.uint2 @[Top.scala 30:19]
    tracer.rvfi_i.bool <= Core.io.rvfi.bool @[Top.scala 30:19]
    io.rvfi <= tracer.rvfi_o @[Top.scala 31:13]

